// generated by Textmapper; DO NOT EDIT

package ast

import (
	"github.com/llir/ll"
	"github.com/llir/ll/selector"
)

// Interfaces.

type LlvmNode interface {
	LlvmNode() *Node
}

// All types implement LlvmNode.
func (n AShrExpr) LlvmNode() *Node { return n.Node }
func (n AShrInst) LlvmNode() *Node { return n.Node }
func (n AddExpr) LlvmNode() *Node { return n.Node }
func (n AddInst) LlvmNode() *Node { return n.Node }
func (n AddrSpace) LlvmNode() *Node { return n.Node }
func (n AddrSpaceCastExpr) LlvmNode() *Node { return n.Node }
func (n AddrSpaceCastInst) LlvmNode() *Node { return n.Node }
func (n AliasDef) LlvmNode() *Node { return n.Node }
func (n AlignField) LlvmNode() *Node { return n.Node }
func (n AlignPair) LlvmNode() *Node { return n.Node }
func (n AlignStack) LlvmNode() *Node { return n.Node }
func (n AlignStackPair) LlvmNode() *Node { return n.Node }
func (n Alignment) LlvmNode() *Node { return n.Node }
func (n AllocSize) LlvmNode() *Node { return n.Node }
func (n AllocaInst) LlvmNode() *Node { return n.Node }
func (n AndExpr) LlvmNode() *Node { return n.Node }
func (n AndInst) LlvmNode() *Node { return n.Node }
func (n Arg) LlvmNode() *Node { return n.Node }
func (n ArgField) LlvmNode() *Node { return n.Node }
func (n Args) LlvmNode() *Node { return n.Node }
func (n ArrayConst) LlvmNode() *Node { return n.Node }
func (n ArrayType) LlvmNode() *Node { return n.Node }
func (n Atomic) LlvmNode() *Node { return n.Node }
func (n AtomicOp) LlvmNode() *Node { return n.Node }
func (n AtomicOrdering) LlvmNode() *Node { return n.Node }
func (n AtomicRMWInst) LlvmNode() *Node { return n.Node }
func (n AttrGroupDef) LlvmNode() *Node { return n.Node }
func (n AttrGroupID) LlvmNode() *Node { return n.Node }
func (n AttrPair) LlvmNode() *Node { return n.Node }
func (n AttrString) LlvmNode() *Node { return n.Node }
func (n AttributesField) LlvmNode() *Node { return n.Node }
func (n BaseTypeField) LlvmNode() *Node { return n.Node }
func (n BasicBlock) LlvmNode() *Node { return n.Node }
func (n BitCastExpr) LlvmNode() *Node { return n.Node }
func (n BitCastInst) LlvmNode() *Node { return n.Node }
func (n BlockAddressConst) LlvmNode() *Node { return n.Node }
func (n BoolConst) LlvmNode() *Node { return n.Node }
func (n BoolLit) LlvmNode() *Node { return n.Node }
func (n BrTerm) LlvmNode() *Node { return n.Node }
func (n CCField) LlvmNode() *Node { return n.Node }
func (n CallInst) LlvmNode() *Node { return n.Node }
func (n CallingConvEnum) LlvmNode() *Node { return n.Node }
func (n CallingConvInt) LlvmNode() *Node { return n.Node }
func (n Case) LlvmNode() *Node { return n.Node }
func (n CatchPadInst) LlvmNode() *Node { return n.Node }
func (n CatchRetTerm) LlvmNode() *Node { return n.Node }
func (n CatchSwitchTerm) LlvmNode() *Node { return n.Node }
func (n CharArrayConst) LlvmNode() *Node { return n.Node }
func (n ChecksumField) LlvmNode() *Node { return n.Node }
func (n ChecksumKind) LlvmNode() *Node { return n.Node }
func (n ChecksumkindField) LlvmNode() *Node { return n.Node }
func (n Clause) LlvmNode() *Node { return n.Node }
func (n ClauseType) LlvmNode() *Node { return n.Node }
func (n Cleanup) LlvmNode() *Node { return n.Node }
func (n CleanupPadInst) LlvmNode() *Node { return n.Node }
func (n CleanupRetTerm) LlvmNode() *Node { return n.Node }
func (n CmpXchgInst) LlvmNode() *Node { return n.Node }
func (n ColumnField) LlvmNode() *Node { return n.Node }
func (n Comdat) LlvmNode() *Node { return n.Node }
func (n ComdatDef) LlvmNode() *Node { return n.Node }
func (n ComdatName) LlvmNode() *Node { return n.Node }
func (n CondBrTerm) LlvmNode() *Node { return n.Node }
func (n ConfigMacrosField) LlvmNode() *Node { return n.Node }
func (n ContainingTypeField) LlvmNode() *Node { return n.Node }
func (n CountField) LlvmNode() *Node { return n.Node }
func (n DIBasicType) LlvmNode() *Node { return n.Node }
func (n DICompileUnit) LlvmNode() *Node { return n.Node }
func (n DICompositeType) LlvmNode() *Node { return n.Node }
func (n DIDerivedType) LlvmNode() *Node { return n.Node }
func (n DIEnumerator) LlvmNode() *Node { return n.Node }
func (n DIExpression) LlvmNode() *Node { return n.Node }
func (n DIFile) LlvmNode() *Node { return n.Node }
func (n DIFlag) LlvmNode() *Node { return n.Node }
func (n DIFlags) LlvmNode() *Node { return n.Node }
func (n DIGlobalVariable) LlvmNode() *Node { return n.Node }
func (n DIGlobalVariableExpression) LlvmNode() *Node { return n.Node }
func (n DIImportedEntity) LlvmNode() *Node { return n.Node }
func (n DILabel) LlvmNode() *Node { return n.Node }
func (n DILexicalBlock) LlvmNode() *Node { return n.Node }
func (n DILexicalBlockFile) LlvmNode() *Node { return n.Node }
func (n DILocalVariable) LlvmNode() *Node { return n.Node }
func (n DILocation) LlvmNode() *Node { return n.Node }
func (n DIMacro) LlvmNode() *Node { return n.Node }
func (n DIMacroFile) LlvmNode() *Node { return n.Node }
func (n DIModule) LlvmNode() *Node { return n.Node }
func (n DINamespace) LlvmNode() *Node { return n.Node }
func (n DIObjCProperty) LlvmNode() *Node { return n.Node }
func (n DISubprogram) LlvmNode() *Node { return n.Node }
func (n DISubrange) LlvmNode() *Node { return n.Node }
func (n DISubroutineType) LlvmNode() *Node { return n.Node }
func (n DITemplateTypeParameter) LlvmNode() *Node { return n.Node }
func (n DITemplateValueParameter) LlvmNode() *Node { return n.Node }
func (n DLLStorageClass) LlvmNode() *Node { return n.Node }
func (n DebugInfoForProfilingField) LlvmNode() *Node { return n.Node }
func (n DeclarationField) LlvmNode() *Node { return n.Node }
func (n Dereferenceable) LlvmNode() *Node { return n.Node }
func (n DirectoryField) LlvmNode() *Node { return n.Node }
func (n DiscriminatorField) LlvmNode() *Node { return n.Node }
func (n DiscriminatorIntField) LlvmNode() *Node { return n.Node }
func (n Distinct) LlvmNode() *Node { return n.Node }
func (n DwarfAddressSpaceField) LlvmNode() *Node { return n.Node }
func (n DwarfAttEncoding) LlvmNode() *Node { return n.Node }
func (n DwarfCC) LlvmNode() *Node { return n.Node }
func (n DwarfLang) LlvmNode() *Node { return n.Node }
func (n DwarfMacinfo) LlvmNode() *Node { return n.Node }
func (n DwarfOp) LlvmNode() *Node { return n.Node }
func (n DwarfTag) LlvmNode() *Node { return n.Node }
func (n DwarfVirtuality) LlvmNode() *Node { return n.Node }
func (n DwoIdField) LlvmNode() *Node { return n.Node }
func (n ElementsField) LlvmNode() *Node { return n.Node }
func (n Ellipsis) LlvmNode() *Node { return n.Node }
func (n EmissionKind) LlvmNode() *Node { return n.Node }
func (n EmissionKindField) LlvmNode() *Node { return n.Node }
func (n EncodingField) LlvmNode() *Node { return n.Node }
func (n EntityField) LlvmNode() *Node { return n.Node }
func (n EnumsField) LlvmNode() *Node { return n.Node }
func (n Exact) LlvmNode() *Node { return n.Node }
func (n ExceptionArg) LlvmNode() *Node { return n.Node }
func (n ExportSymbolsField) LlvmNode() *Node { return n.Node }
func (n ExprField) LlvmNode() *Node { return n.Node }
func (n ExternLinkage) LlvmNode() *Node { return n.Node }
func (n ExternallyInitialized) LlvmNode() *Node { return n.Node }
func (n ExtraDataField) LlvmNode() *Node { return n.Node }
func (n ExtractElementExpr) LlvmNode() *Node { return n.Node }
func (n ExtractElementInst) LlvmNode() *Node { return n.Node }
func (n ExtractValueExpr) LlvmNode() *Node { return n.Node }
func (n ExtractValueInst) LlvmNode() *Node { return n.Node }
func (n FAddExpr) LlvmNode() *Node { return n.Node }
func (n FAddInst) LlvmNode() *Node { return n.Node }
func (n FCmpExpr) LlvmNode() *Node { return n.Node }
func (n FCmpInst) LlvmNode() *Node { return n.Node }
func (n FDivExpr) LlvmNode() *Node { return n.Node }
func (n FDivInst) LlvmNode() *Node { return n.Node }
func (n FMulExpr) LlvmNode() *Node { return n.Node }
func (n FMulInst) LlvmNode() *Node { return n.Node }
func (n FPExtExpr) LlvmNode() *Node { return n.Node }
func (n FPExtInst) LlvmNode() *Node { return n.Node }
func (n FPToSIExpr) LlvmNode() *Node { return n.Node }
func (n FPToSIInst) LlvmNode() *Node { return n.Node }
func (n FPToUIExpr) LlvmNode() *Node { return n.Node }
func (n FPToUIInst) LlvmNode() *Node { return n.Node }
func (n FPTruncExpr) LlvmNode() *Node { return n.Node }
func (n FPTruncInst) LlvmNode() *Node { return n.Node }
func (n FPred) LlvmNode() *Node { return n.Node }
func (n FRemExpr) LlvmNode() *Node { return n.Node }
func (n FRemInst) LlvmNode() *Node { return n.Node }
func (n FSubExpr) LlvmNode() *Node { return n.Node }
func (n FSubInst) LlvmNode() *Node { return n.Node }
func (n FastMathFlag) LlvmNode() *Node { return n.Node }
func (n FenceInst) LlvmNode() *Node { return n.Node }
func (n FileField) LlvmNode() *Node { return n.Node }
func (n FilenameField) LlvmNode() *Node { return n.Node }
func (n FlagsField) LlvmNode() *Node { return n.Node }
func (n FlagsStringField) LlvmNode() *Node { return n.Node }
func (n FloatConst) LlvmNode() *Node { return n.Node }
func (n FloatKind) LlvmNode() *Node { return n.Node }
func (n FloatLit) LlvmNode() *Node { return n.Node }
func (n FloatType) LlvmNode() *Node { return n.Node }
func (n FuncAttribute) LlvmNode() *Node { return n.Node }
func (n FuncBody) LlvmNode() *Node { return n.Node }
func (n FuncDecl) LlvmNode() *Node { return n.Node }
func (n FuncDef) LlvmNode() *Node { return n.Node }
func (n FuncHeader) LlvmNode() *Node { return n.Node }
func (n FuncType) LlvmNode() *Node { return n.Node }
func (n GCNode) LlvmNode() *Node { return n.Node }
func (n GEPIndex) LlvmNode() *Node { return n.Node }
func (n GenericDINode) LlvmNode() *Node { return n.Node }
func (n GetElementPtrExpr) LlvmNode() *Node { return n.Node }
func (n GetElementPtrInst) LlvmNode() *Node { return n.Node }
func (n GetterField) LlvmNode() *Node { return n.Node }
func (n GlobalDecl) LlvmNode() *Node { return n.Node }
func (n GlobalDef) LlvmNode() *Node { return n.Node }
func (n GlobalIdent) LlvmNode() *Node { return n.Node }
func (n GlobalsField) LlvmNode() *Node { return n.Node }
func (n HeaderField) LlvmNode() *Node { return n.Node }
func (n ICmpExpr) LlvmNode() *Node { return n.Node }
func (n ICmpInst) LlvmNode() *Node { return n.Node }
func (n IFuncDef) LlvmNode() *Node { return n.Node }
func (n IPred) LlvmNode() *Node { return n.Node }
func (n IdentifierField) LlvmNode() *Node { return n.Node }
func (n Immutable) LlvmNode() *Node { return n.Node }
func (n ImportsField) LlvmNode() *Node { return n.Node }
func (n InAlloca) LlvmNode() *Node { return n.Node }
func (n InBounds) LlvmNode() *Node { return n.Node }
func (n InRange) LlvmNode() *Node { return n.Node }
func (n Inc) LlvmNode() *Node { return n.Node }
func (n IncludePathField) LlvmNode() *Node { return n.Node }
func (n IndirectBrTerm) LlvmNode() *Node { return n.Node }
func (n InlineAsm) LlvmNode() *Node { return n.Node }
func (n InlinedAtField) LlvmNode() *Node { return n.Node }
func (n InsertElementExpr) LlvmNode() *Node { return n.Node }
func (n InsertElementInst) LlvmNode() *Node { return n.Node }
func (n InsertValueExpr) LlvmNode() *Node { return n.Node }
func (n InsertValueInst) LlvmNode() *Node { return n.Node }
func (n IntConst) LlvmNode() *Node { return n.Node }
func (n IntLit) LlvmNode() *Node { return n.Node }
func (n IntToPtrExpr) LlvmNode() *Node { return n.Node }
func (n IntToPtrInst) LlvmNode() *Node { return n.Node }
func (n IntType) LlvmNode() *Node { return n.Node }
func (n IntelDialect) LlvmNode() *Node { return n.Node }
func (n InvokeTerm) LlvmNode() *Node { return n.Node }
func (n IsDefinitionField) LlvmNode() *Node { return n.Node }
func (n IsImplicitCodeField) LlvmNode() *Node { return n.Node }
func (n IsLocalField) LlvmNode() *Node { return n.Node }
func (n IsOptimizedField) LlvmNode() *Node { return n.Node }
func (n IsUnsignedField) LlvmNode() *Node { return n.Node }
func (n IsysrootField) LlvmNode() *Node { return n.Node }
func (n LShrExpr) LlvmNode() *Node { return n.Node }
func (n LShrInst) LlvmNode() *Node { return n.Node }
func (n Label) LlvmNode() *Node { return n.Node }
func (n LabelIdent) LlvmNode() *Node { return n.Node }
func (n LabelType) LlvmNode() *Node { return n.Node }
func (n LandingPadInst) LlvmNode() *Node { return n.Node }
func (n LanguageField) LlvmNode() *Node { return n.Node }
func (n LineField) LlvmNode() *Node { return n.Node }
func (n Linkage) LlvmNode() *Node { return n.Node }
func (n LinkageNameField) LlvmNode() *Node { return n.Node }
func (n LoadInst) LlvmNode() *Node { return n.Node }
func (n LocalDefInst) LlvmNode() *Node { return n.Node }
func (n LocalDefTerm) LlvmNode() *Node { return n.Node }
func (n LocalIdent) LlvmNode() *Node { return n.Node }
func (n LowerBoundField) LlvmNode() *Node { return n.Node }
func (n MDFields) LlvmNode() *Node { return n.Node }
func (n MDString) LlvmNode() *Node { return n.Node }
func (n MDTuple) LlvmNode() *Node { return n.Node }
func (n MMXType) LlvmNode() *Node { return n.Node }
func (n MacrosField) LlvmNode() *Node { return n.Node }
func (n MetadataAttachment) LlvmNode() *Node { return n.Node }
func (n MetadataDef) LlvmNode() *Node { return n.Node }
func (n MetadataID) LlvmNode() *Node { return n.Node }
func (n MetadataName) LlvmNode() *Node { return n.Node }
func (n MetadataType) LlvmNode() *Node { return n.Node }
func (n Module) LlvmNode() *Node { return n.Node }
func (n ModuleAsm) LlvmNode() *Node { return n.Node }
func (n MulExpr) LlvmNode() *Node { return n.Node }
func (n MulInst) LlvmNode() *Node { return n.Node }
func (n NameField) LlvmNode() *Node { return n.Node }
func (n NameTableKind) LlvmNode() *Node { return n.Node }
func (n NameTableKindField) LlvmNode() *Node { return n.Node }
func (n NamedMetadataDef) LlvmNode() *Node { return n.Node }
func (n NamedType) LlvmNode() *Node { return n.Node }
func (n NodesField) LlvmNode() *Node { return n.Node }
func (n NoneConst) LlvmNode() *Node { return n.Node }
func (n NullConst) LlvmNode() *Node { return n.Node }
func (n NullLit) LlvmNode() *Node { return n.Node }
func (n OffsetField) LlvmNode() *Node { return n.Node }
func (n OpaqueType) LlvmNode() *Node { return n.Node }
func (n OperandBundle) LlvmNode() *Node { return n.Node }
func (n OperandsField) LlvmNode() *Node { return n.Node }
func (n OrExpr) LlvmNode() *Node { return n.Node }
func (n OrInst) LlvmNode() *Node { return n.Node }
func (n OverflowFlag) LlvmNode() *Node { return n.Node }
func (n PackedStructType) LlvmNode() *Node { return n.Node }
func (n Param) LlvmNode() *Node { return n.Node }
func (n ParamAttribute) LlvmNode() *Node { return n.Node }
func (n Params) LlvmNode() *Node { return n.Node }
func (n Personality) LlvmNode() *Node { return n.Node }
func (n PhiInst) LlvmNode() *Node { return n.Node }
func (n PointerType) LlvmNode() *Node { return n.Node }
func (n Preemption) LlvmNode() *Node { return n.Node }
func (n Prefix) LlvmNode() *Node { return n.Node }
func (n ProducerField) LlvmNode() *Node { return n.Node }
func (n Prologue) LlvmNode() *Node { return n.Node }
func (n PtrToIntExpr) LlvmNode() *Node { return n.Node }
func (n PtrToIntInst) LlvmNode() *Node { return n.Node }
func (n ResumeTerm) LlvmNode() *Node { return n.Node }
func (n RetTerm) LlvmNode() *Node { return n.Node }
func (n RetainedNodesField) LlvmNode() *Node { return n.Node }
func (n RetainedTypesField) LlvmNode() *Node { return n.Node }
func (n ReturnAttribute) LlvmNode() *Node { return n.Node }
func (n RuntimeLangField) LlvmNode() *Node { return n.Node }
func (n RuntimeVersionField) LlvmNode() *Node { return n.Node }
func (n SDivExpr) LlvmNode() *Node { return n.Node }
func (n SDivInst) LlvmNode() *Node { return n.Node }
func (n SExtExpr) LlvmNode() *Node { return n.Node }
func (n SExtInst) LlvmNode() *Node { return n.Node }
func (n SIToFPExpr) LlvmNode() *Node { return n.Node }
func (n SIToFPInst) LlvmNode() *Node { return n.Node }
func (n SRemExpr) LlvmNode() *Node { return n.Node }
func (n SRemInst) LlvmNode() *Node { return n.Node }
func (n ScopeField) LlvmNode() *Node { return n.Node }
func (n ScopeLineField) LlvmNode() *Node { return n.Node }
func (n Section) LlvmNode() *Node { return n.Node }
func (n SelectExpr) LlvmNode() *Node { return n.Node }
func (n SelectInst) LlvmNode() *Node { return n.Node }
func (n SelectionKind) LlvmNode() *Node { return n.Node }
func (n SetterField) LlvmNode() *Node { return n.Node }
func (n ShlExpr) LlvmNode() *Node { return n.Node }
func (n ShlInst) LlvmNode() *Node { return n.Node }
func (n ShuffleVectorExpr) LlvmNode() *Node { return n.Node }
func (n ShuffleVectorInst) LlvmNode() *Node { return n.Node }
func (n SideEffect) LlvmNode() *Node { return n.Node }
func (n SizeField) LlvmNode() *Node { return n.Node }
func (n SourceField) LlvmNode() *Node { return n.Node }
func (n SourceFilename) LlvmNode() *Node { return n.Node }
func (n SplitDebugFilenameField) LlvmNode() *Node { return n.Node }
func (n SplitDebugInliningField) LlvmNode() *Node { return n.Node }
func (n StackAlignment) LlvmNode() *Node { return n.Node }
func (n StoreInst) LlvmNode() *Node { return n.Node }
func (n StringLit) LlvmNode() *Node { return n.Node }
func (n StructConst) LlvmNode() *Node { return n.Node }
func (n StructType) LlvmNode() *Node { return n.Node }
func (n SubExpr) LlvmNode() *Node { return n.Node }
func (n SubInst) LlvmNode() *Node { return n.Node }
func (n SwiftError) LlvmNode() *Node { return n.Node }
func (n SwitchTerm) LlvmNode() *Node { return n.Node }
func (n SyncScope) LlvmNode() *Node { return n.Node }
func (n TLSModel) LlvmNode() *Node { return n.Node }
func (n TagField) LlvmNode() *Node { return n.Node }
func (n Tail) LlvmNode() *Node { return n.Node }
func (n TargetDataLayout) LlvmNode() *Node { return n.Node }
func (n TargetTriple) LlvmNode() *Node { return n.Node }
func (n TemplateParamsField) LlvmNode() *Node { return n.Node }
func (n ThisAdjustmentField) LlvmNode() *Node { return n.Node }
func (n ThreadLocal) LlvmNode() *Node { return n.Node }
func (n ThrownTypesField) LlvmNode() *Node { return n.Node }
func (n TokenType) LlvmNode() *Node { return n.Node }
func (n TruncExpr) LlvmNode() *Node { return n.Node }
func (n TruncInst) LlvmNode() *Node { return n.Node }
func (n TypeConst) LlvmNode() *Node { return n.Node }
func (n TypeDef) LlvmNode() *Node { return n.Node }
func (n TypeField) LlvmNode() *Node { return n.Node }
func (n TypeMacinfoField) LlvmNode() *Node { return n.Node }
func (n TypeValue) LlvmNode() *Node { return n.Node }
func (n TypesField) LlvmNode() *Node { return n.Node }
func (n UDivExpr) LlvmNode() *Node { return n.Node }
func (n UDivInst) LlvmNode() *Node { return n.Node }
func (n UIToFPExpr) LlvmNode() *Node { return n.Node }
func (n UIToFPInst) LlvmNode() *Node { return n.Node }
func (n URemExpr) LlvmNode() *Node { return n.Node }
func (n URemInst) LlvmNode() *Node { return n.Node }
func (n UintLit) LlvmNode() *Node { return n.Node }
func (n UndefConst) LlvmNode() *Node { return n.Node }
func (n UnitField) LlvmNode() *Node { return n.Node }
func (n UnnamedAddr) LlvmNode() *Node { return n.Node }
func (n UnreachableTerm) LlvmNode() *Node { return n.Node }
func (n UnwindTarget) LlvmNode() *Node { return n.Node }
func (n UseListOrder) LlvmNode() *Node { return n.Node }
func (n UseListOrderBB) LlvmNode() *Node { return n.Node }
func (n VAArgInst) LlvmNode() *Node { return n.Node }
func (n ValueField) LlvmNode() *Node { return n.Node }
func (n ValueIntField) LlvmNode() *Node { return n.Node }
func (n ValueStringField) LlvmNode() *Node { return n.Node }
func (n VarField) LlvmNode() *Node { return n.Node }
func (n VectorConst) LlvmNode() *Node { return n.Node }
func (n VectorType) LlvmNode() *Node { return n.Node }
func (n VirtualIndexField) LlvmNode() *Node { return n.Node }
func (n VirtualityField) LlvmNode() *Node { return n.Node }
func (n Visibility) LlvmNode() *Node { return n.Node }
func (n VoidType) LlvmNode() *Node { return n.Node }
func (n Volatile) LlvmNode() *Node { return n.Node }
func (n VtableHolderField) LlvmNode() *Node { return n.Node }
func (n Weak) LlvmNode() *Node { return n.Node }
func (n XorExpr) LlvmNode() *Node { return n.Node }
func (n XorInst) LlvmNode() *Node { return n.Node }
func (n ZExtExpr) LlvmNode() *Node { return n.Node }
func (n ZExtInst) LlvmNode() *Node { return n.Node }
func (n ZeroInitializerConst) LlvmNode() *Node { return n.Node }

type CallingConv interface {
	LlvmNode
	callingConvNode()
}

// callingConvNode() ensures that only the following types can be
// assigned to CallingConv.
//
func (CallingConvEnum) callingConvNode() {}
func (CallingConvInt) callingConvNode() {}

type ConcreteType interface {
	LlvmNode
	concreteTypeNode()
}

// concreteTypeNode() ensures that only the following types can be
// assigned to ConcreteType.
//
func (ArrayType) concreteTypeNode() {}
func (FloatType) concreteTypeNode() {}
func (IntType) concreteTypeNode() {}
func (LabelType) concreteTypeNode() {}
func (MMXType) concreteTypeNode() {}
func (NamedType) concreteTypeNode() {}
func (PackedStructType) concreteTypeNode() {}
func (PointerType) concreteTypeNode() {}
func (StructType) concreteTypeNode() {}
func (TokenType) concreteTypeNode() {}
func (VectorType) concreteTypeNode() {}

type Constant interface {
	LlvmNode
	constantNode()
}

// constantNode() ensures that only the following types can be
// assigned to Constant.
//
func (AShrExpr) constantNode() {}
func (AddExpr) constantNode() {}
func (AddrSpaceCastExpr) constantNode() {}
func (AndExpr) constantNode() {}
func (ArrayConst) constantNode() {}
func (BitCastExpr) constantNode() {}
func (BlockAddressConst) constantNode() {}
func (BoolConst) constantNode() {}
func (CharArrayConst) constantNode() {}
func (ExtractElementExpr) constantNode() {}
func (ExtractValueExpr) constantNode() {}
func (FAddExpr) constantNode() {}
func (FCmpExpr) constantNode() {}
func (FDivExpr) constantNode() {}
func (FMulExpr) constantNode() {}
func (FPExtExpr) constantNode() {}
func (FPToSIExpr) constantNode() {}
func (FPToUIExpr) constantNode() {}
func (FPTruncExpr) constantNode() {}
func (FRemExpr) constantNode() {}
func (FSubExpr) constantNode() {}
func (FloatConst) constantNode() {}
func (GetElementPtrExpr) constantNode() {}
func (GlobalIdent) constantNode() {}
func (ICmpExpr) constantNode() {}
func (InsertElementExpr) constantNode() {}
func (InsertValueExpr) constantNode() {}
func (IntConst) constantNode() {}
func (IntToPtrExpr) constantNode() {}
func (LShrExpr) constantNode() {}
func (MulExpr) constantNode() {}
func (NoneConst) constantNode() {}
func (NullConst) constantNode() {}
func (OrExpr) constantNode() {}
func (PtrToIntExpr) constantNode() {}
func (SDivExpr) constantNode() {}
func (SExtExpr) constantNode() {}
func (SIToFPExpr) constantNode() {}
func (SRemExpr) constantNode() {}
func (SelectExpr) constantNode() {}
func (ShlExpr) constantNode() {}
func (ShuffleVectorExpr) constantNode() {}
func (StructConst) constantNode() {}
func (SubExpr) constantNode() {}
func (TruncExpr) constantNode() {}
func (UDivExpr) constantNode() {}
func (UIToFPExpr) constantNode() {}
func (URemExpr) constantNode() {}
func (UndefConst) constantNode() {}
func (VectorConst) constantNode() {}
func (XorExpr) constantNode() {}
func (ZExtExpr) constantNode() {}
func (ZeroInitializerConst) constantNode() {}

type ConstantExpr interface {
	LlvmNode
	constantExprNode()
}

// constantExprNode() ensures that only the following types can be
// assigned to ConstantExpr.
//
func (AShrExpr) constantExprNode() {}
func (AddExpr) constantExprNode() {}
func (AddrSpaceCastExpr) constantExprNode() {}
func (AndExpr) constantExprNode() {}
func (BitCastExpr) constantExprNode() {}
func (ExtractElementExpr) constantExprNode() {}
func (ExtractValueExpr) constantExprNode() {}
func (FAddExpr) constantExprNode() {}
func (FCmpExpr) constantExprNode() {}
func (FDivExpr) constantExprNode() {}
func (FMulExpr) constantExprNode() {}
func (FPExtExpr) constantExprNode() {}
func (FPToSIExpr) constantExprNode() {}
func (FPToUIExpr) constantExprNode() {}
func (FPTruncExpr) constantExprNode() {}
func (FRemExpr) constantExprNode() {}
func (FSubExpr) constantExprNode() {}
func (GetElementPtrExpr) constantExprNode() {}
func (ICmpExpr) constantExprNode() {}
func (InsertElementExpr) constantExprNode() {}
func (InsertValueExpr) constantExprNode() {}
func (IntToPtrExpr) constantExprNode() {}
func (LShrExpr) constantExprNode() {}
func (MulExpr) constantExprNode() {}
func (OrExpr) constantExprNode() {}
func (PtrToIntExpr) constantExprNode() {}
func (SDivExpr) constantExprNode() {}
func (SExtExpr) constantExprNode() {}
func (SIToFPExpr) constantExprNode() {}
func (SRemExpr) constantExprNode() {}
func (SelectExpr) constantExprNode() {}
func (ShlExpr) constantExprNode() {}
func (ShuffleVectorExpr) constantExprNode() {}
func (SubExpr) constantExprNode() {}
func (TruncExpr) constantExprNode() {}
func (UDivExpr) constantExprNode() {}
func (UIToFPExpr) constantExprNode() {}
func (URemExpr) constantExprNode() {}
func (XorExpr) constantExprNode() {}
func (ZExtExpr) constantExprNode() {}

type DIBasicTypeField interface {
	LlvmNode
	dIBasicTypeFieldNode()
}

// dIBasicTypeFieldNode() ensures that only the following types can be
// assigned to DIBasicTypeField.
//
func (AlignField) dIBasicTypeFieldNode() {}
func (EncodingField) dIBasicTypeFieldNode() {}
func (FlagsField) dIBasicTypeFieldNode() {}
func (NameField) dIBasicTypeFieldNode() {}
func (SizeField) dIBasicTypeFieldNode() {}
func (TagField) dIBasicTypeFieldNode() {}

type DICompileUnitField interface {
	LlvmNode
	dICompileUnitFieldNode()
}

// dICompileUnitFieldNode() ensures that only the following types can be
// assigned to DICompileUnitField.
//
func (DebugInfoForProfilingField) dICompileUnitFieldNode() {}
func (DwoIdField) dICompileUnitFieldNode() {}
func (EmissionKindField) dICompileUnitFieldNode() {}
func (EnumsField) dICompileUnitFieldNode() {}
func (FileField) dICompileUnitFieldNode() {}
func (FlagsStringField) dICompileUnitFieldNode() {}
func (GlobalsField) dICompileUnitFieldNode() {}
func (ImportsField) dICompileUnitFieldNode() {}
func (IsOptimizedField) dICompileUnitFieldNode() {}
func (LanguageField) dICompileUnitFieldNode() {}
func (MacrosField) dICompileUnitFieldNode() {}
func (NameTableKindField) dICompileUnitFieldNode() {}
func (ProducerField) dICompileUnitFieldNode() {}
func (RetainedTypesField) dICompileUnitFieldNode() {}
func (RuntimeVersionField) dICompileUnitFieldNode() {}
func (SplitDebugFilenameField) dICompileUnitFieldNode() {}
func (SplitDebugInliningField) dICompileUnitFieldNode() {}

type DICompositeTypeField interface {
	LlvmNode
	dICompositeTypeFieldNode()
}

// dICompositeTypeFieldNode() ensures that only the following types can be
// assigned to DICompositeTypeField.
//
func (AlignField) dICompositeTypeFieldNode() {}
func (BaseTypeField) dICompositeTypeFieldNode() {}
func (DiscriminatorField) dICompositeTypeFieldNode() {}
func (ElementsField) dICompositeTypeFieldNode() {}
func (FileField) dICompositeTypeFieldNode() {}
func (FlagsField) dICompositeTypeFieldNode() {}
func (IdentifierField) dICompositeTypeFieldNode() {}
func (LineField) dICompositeTypeFieldNode() {}
func (NameField) dICompositeTypeFieldNode() {}
func (OffsetField) dICompositeTypeFieldNode() {}
func (RuntimeLangField) dICompositeTypeFieldNode() {}
func (ScopeField) dICompositeTypeFieldNode() {}
func (SizeField) dICompositeTypeFieldNode() {}
func (TagField) dICompositeTypeFieldNode() {}
func (TemplateParamsField) dICompositeTypeFieldNode() {}
func (VtableHolderField) dICompositeTypeFieldNode() {}

type DIDerivedTypeField interface {
	LlvmNode
	dIDerivedTypeFieldNode()
}

// dIDerivedTypeFieldNode() ensures that only the following types can be
// assigned to DIDerivedTypeField.
//
func (AlignField) dIDerivedTypeFieldNode() {}
func (BaseTypeField) dIDerivedTypeFieldNode() {}
func (DwarfAddressSpaceField) dIDerivedTypeFieldNode() {}
func (ExtraDataField) dIDerivedTypeFieldNode() {}
func (FileField) dIDerivedTypeFieldNode() {}
func (FlagsField) dIDerivedTypeFieldNode() {}
func (LineField) dIDerivedTypeFieldNode() {}
func (NameField) dIDerivedTypeFieldNode() {}
func (OffsetField) dIDerivedTypeFieldNode() {}
func (ScopeField) dIDerivedTypeFieldNode() {}
func (SizeField) dIDerivedTypeFieldNode() {}
func (TagField) dIDerivedTypeFieldNode() {}

type DIEnumeratorField interface {
	LlvmNode
	dIEnumeratorFieldNode()
}

// dIEnumeratorFieldNode() ensures that only the following types can be
// assigned to DIEnumeratorField.
//
func (IsUnsignedField) dIEnumeratorFieldNode() {}
func (NameField) dIEnumeratorFieldNode() {}
func (ValueIntField) dIEnumeratorFieldNode() {}

type DIExpressionField interface {
	LlvmNode
	dIExpressionFieldNode()
}

// dIExpressionFieldNode() ensures that only the following types can be
// assigned to DIExpressionField.
//
func (DwarfOp) dIExpressionFieldNode() {}
func (IntLit) dIExpressionFieldNode() {}

type DIFileField interface {
	LlvmNode
	dIFileFieldNode()
}

// dIFileFieldNode() ensures that only the following types can be
// assigned to DIFileField.
//
func (ChecksumField) dIFileFieldNode() {}
func (ChecksumkindField) dIFileFieldNode() {}
func (DirectoryField) dIFileFieldNode() {}
func (FilenameField) dIFileFieldNode() {}
func (SourceField) dIFileFieldNode() {}

type DIGlobalVariableExpressionField interface {
	LlvmNode
	dIGlobalVariableExpressionFieldNode()
}

// dIGlobalVariableExpressionFieldNode() ensures that only the following types can be
// assigned to DIGlobalVariableExpressionField.
//
func (ExprField) dIGlobalVariableExpressionFieldNode() {}
func (VarField) dIGlobalVariableExpressionFieldNode() {}

type DIGlobalVariableField interface {
	LlvmNode
	dIGlobalVariableFieldNode()
}

// dIGlobalVariableFieldNode() ensures that only the following types can be
// assigned to DIGlobalVariableField.
//
func (AlignField) dIGlobalVariableFieldNode() {}
func (DeclarationField) dIGlobalVariableFieldNode() {}
func (FileField) dIGlobalVariableFieldNode() {}
func (IsDefinitionField) dIGlobalVariableFieldNode() {}
func (IsLocalField) dIGlobalVariableFieldNode() {}
func (LineField) dIGlobalVariableFieldNode() {}
func (LinkageNameField) dIGlobalVariableFieldNode() {}
func (NameField) dIGlobalVariableFieldNode() {}
func (ScopeField) dIGlobalVariableFieldNode() {}
func (TemplateParamsField) dIGlobalVariableFieldNode() {}
func (TypeField) dIGlobalVariableFieldNode() {}

type DIImportedEntityField interface {
	LlvmNode
	dIImportedEntityFieldNode()
}

// dIImportedEntityFieldNode() ensures that only the following types can be
// assigned to DIImportedEntityField.
//
func (EntityField) dIImportedEntityFieldNode() {}
func (FileField) dIImportedEntityFieldNode() {}
func (LineField) dIImportedEntityFieldNode() {}
func (NameField) dIImportedEntityFieldNode() {}
func (ScopeField) dIImportedEntityFieldNode() {}
func (TagField) dIImportedEntityFieldNode() {}

type DILabelField interface {
	LlvmNode
	dILabelFieldNode()
}

// dILabelFieldNode() ensures that only the following types can be
// assigned to DILabelField.
//
func (FileField) dILabelFieldNode() {}
func (LineField) dILabelFieldNode() {}
func (NameField) dILabelFieldNode() {}
func (ScopeField) dILabelFieldNode() {}

type DILexicalBlockField interface {
	LlvmNode
	dILexicalBlockFieldNode()
}

// dILexicalBlockFieldNode() ensures that only the following types can be
// assigned to DILexicalBlockField.
//
func (ColumnField) dILexicalBlockFieldNode() {}
func (FileField) dILexicalBlockFieldNode() {}
func (LineField) dILexicalBlockFieldNode() {}
func (ScopeField) dILexicalBlockFieldNode() {}

type DILexicalBlockFileField interface {
	LlvmNode
	dILexicalBlockFileFieldNode()
}

// dILexicalBlockFileFieldNode() ensures that only the following types can be
// assigned to DILexicalBlockFileField.
//
func (DiscriminatorIntField) dILexicalBlockFileFieldNode() {}
func (FileField) dILexicalBlockFileFieldNode() {}
func (ScopeField) dILexicalBlockFileFieldNode() {}

type DILocalVariableField interface {
	LlvmNode
	dILocalVariableFieldNode()
}

// dILocalVariableFieldNode() ensures that only the following types can be
// assigned to DILocalVariableField.
//
func (AlignField) dILocalVariableFieldNode() {}
func (ArgField) dILocalVariableFieldNode() {}
func (FileField) dILocalVariableFieldNode() {}
func (FlagsField) dILocalVariableFieldNode() {}
func (LineField) dILocalVariableFieldNode() {}
func (NameField) dILocalVariableFieldNode() {}
func (ScopeField) dILocalVariableFieldNode() {}
func (TypeField) dILocalVariableFieldNode() {}

type DILocationField interface {
	LlvmNode
	dILocationFieldNode()
}

// dILocationFieldNode() ensures that only the following types can be
// assigned to DILocationField.
//
func (ColumnField) dILocationFieldNode() {}
func (InlinedAtField) dILocationFieldNode() {}
func (IsImplicitCodeField) dILocationFieldNode() {}
func (LineField) dILocationFieldNode() {}
func (ScopeField) dILocationFieldNode() {}

type DIMacroField interface {
	LlvmNode
	dIMacroFieldNode()
}

// dIMacroFieldNode() ensures that only the following types can be
// assigned to DIMacroField.
//
func (LineField) dIMacroFieldNode() {}
func (NameField) dIMacroFieldNode() {}
func (TypeMacinfoField) dIMacroFieldNode() {}
func (ValueStringField) dIMacroFieldNode() {}

type DIMacroFileField interface {
	LlvmNode
	dIMacroFileFieldNode()
}

// dIMacroFileFieldNode() ensures that only the following types can be
// assigned to DIMacroFileField.
//
func (FileField) dIMacroFileFieldNode() {}
func (LineField) dIMacroFileFieldNode() {}
func (NodesField) dIMacroFileFieldNode() {}
func (TypeMacinfoField) dIMacroFileFieldNode() {}

type DIModuleField interface {
	LlvmNode
	dIModuleFieldNode()
}

// dIModuleFieldNode() ensures that only the following types can be
// assigned to DIModuleField.
//
func (ConfigMacrosField) dIModuleFieldNode() {}
func (IncludePathField) dIModuleFieldNode() {}
func (IsysrootField) dIModuleFieldNode() {}
func (NameField) dIModuleFieldNode() {}
func (ScopeField) dIModuleFieldNode() {}

type DINamespaceField interface {
	LlvmNode
	dINamespaceFieldNode()
}

// dINamespaceFieldNode() ensures that only the following types can be
// assigned to DINamespaceField.
//
func (ExportSymbolsField) dINamespaceFieldNode() {}
func (NameField) dINamespaceFieldNode() {}
func (ScopeField) dINamespaceFieldNode() {}

type DIObjCPropertyField interface {
	LlvmNode
	dIObjCPropertyFieldNode()
}

// dIObjCPropertyFieldNode() ensures that only the following types can be
// assigned to DIObjCPropertyField.
//
func (AttributesField) dIObjCPropertyFieldNode() {}
func (FileField) dIObjCPropertyFieldNode() {}
func (GetterField) dIObjCPropertyFieldNode() {}
func (LineField) dIObjCPropertyFieldNode() {}
func (NameField) dIObjCPropertyFieldNode() {}
func (SetterField) dIObjCPropertyFieldNode() {}
func (TypeField) dIObjCPropertyFieldNode() {}

type DISubprogramField interface {
	LlvmNode
	dISubprogramFieldNode()
}

// dISubprogramFieldNode() ensures that only the following types can be
// assigned to DISubprogramField.
//
func (ContainingTypeField) dISubprogramFieldNode() {}
func (DeclarationField) dISubprogramFieldNode() {}
func (FileField) dISubprogramFieldNode() {}
func (FlagsField) dISubprogramFieldNode() {}
func (IsDefinitionField) dISubprogramFieldNode() {}
func (IsLocalField) dISubprogramFieldNode() {}
func (IsOptimizedField) dISubprogramFieldNode() {}
func (LineField) dISubprogramFieldNode() {}
func (LinkageNameField) dISubprogramFieldNode() {}
func (NameField) dISubprogramFieldNode() {}
func (RetainedNodesField) dISubprogramFieldNode() {}
func (ScopeField) dISubprogramFieldNode() {}
func (ScopeLineField) dISubprogramFieldNode() {}
func (TemplateParamsField) dISubprogramFieldNode() {}
func (ThisAdjustmentField) dISubprogramFieldNode() {}
func (ThrownTypesField) dISubprogramFieldNode() {}
func (TypeField) dISubprogramFieldNode() {}
func (UnitField) dISubprogramFieldNode() {}
func (VirtualIndexField) dISubprogramFieldNode() {}
func (VirtualityField) dISubprogramFieldNode() {}

type DISubrangeField interface {
	LlvmNode
	dISubrangeFieldNode()
}

// dISubrangeFieldNode() ensures that only the following types can be
// assigned to DISubrangeField.
//
func (CountField) dISubrangeFieldNode() {}
func (LowerBoundField) dISubrangeFieldNode() {}

type DISubroutineTypeField interface {
	LlvmNode
	dISubroutineTypeFieldNode()
}

// dISubroutineTypeFieldNode() ensures that only the following types can be
// assigned to DISubroutineTypeField.
//
func (CCField) dISubroutineTypeFieldNode() {}
func (FlagsField) dISubroutineTypeFieldNode() {}
func (TypesField) dISubroutineTypeFieldNode() {}

type DITemplateTypeParameterField interface {
	LlvmNode
	dITemplateTypeParameterFieldNode()
}

// dITemplateTypeParameterFieldNode() ensures that only the following types can be
// assigned to DITemplateTypeParameterField.
//
func (NameField) dITemplateTypeParameterFieldNode() {}
func (TypeField) dITemplateTypeParameterFieldNode() {}

type DITemplateValueParameterField interface {
	LlvmNode
	dITemplateValueParameterFieldNode()
}

// dITemplateValueParameterFieldNode() ensures that only the following types can be
// assigned to DITemplateValueParameterField.
//
func (NameField) dITemplateValueParameterFieldNode() {}
func (TagField) dITemplateValueParameterFieldNode() {}
func (TypeField) dITemplateValueParameterFieldNode() {}
func (ValueField) dITemplateValueParameterFieldNode() {}

type ExceptionScope interface {
	LlvmNode
	exceptionScopeNode()
}

// exceptionScopeNode() ensures that only the following types can be
// assigned to ExceptionScope.
//
func (LocalIdent) exceptionScopeNode() {}
func (NoneConst) exceptionScopeNode() {}

type FirstClassType interface {
	LlvmNode
	firstClassTypeNode()
}

// firstClassTypeNode() ensures that only the following types can be
// assigned to FirstClassType.
//
func (ArrayType) firstClassTypeNode() {}
func (FloatType) firstClassTypeNode() {}
func (IntType) firstClassTypeNode() {}
func (LabelType) firstClassTypeNode() {}
func (MMXType) firstClassTypeNode() {}
func (MetadataType) firstClassTypeNode() {}
func (NamedType) firstClassTypeNode() {}
func (PackedStructType) firstClassTypeNode() {}
func (PointerType) firstClassTypeNode() {}
func (StructType) firstClassTypeNode() {}
func (TokenType) firstClassTypeNode() {}
func (VectorType) firstClassTypeNode() {}

type FuncAttr interface {
	LlvmNode
	funcAttrNode()
}

// funcAttrNode() ensures that only the following types can be
// assigned to FuncAttr.
//
func (AlignPair) funcAttrNode() {}
func (AlignStackPair) funcAttrNode() {}
func (AllocSize) funcAttrNode() {}
func (AttrGroupID) funcAttrNode() {}
func (AttrPair) funcAttrNode() {}
func (AttrString) funcAttrNode() {}
func (FuncAttribute) funcAttrNode() {}
func (StackAlignment) funcAttrNode() {}

type GenericDINodeField interface {
	LlvmNode
	genericDINodeFieldNode()
}

// genericDINodeFieldNode() ensures that only the following types can be
// assigned to GenericDINodeField.
//
func (HeaderField) genericDINodeFieldNode() {}
func (OperandsField) genericDINodeFieldNode() {}
func (TagField) genericDINodeFieldNode() {}

type GlobalAttr interface {
	LlvmNode
	globalAttrNode()
}

// globalAttrNode() ensures that only the following types can be
// assigned to GlobalAttr.
//
func (Alignment) globalAttrNode() {}
func (Comdat) globalAttrNode() {}
func (MetadataAttachment) globalAttrNode() {}
func (Section) globalAttrNode() {}

type IndirectSymbolDef interface {
	LlvmNode
	indirectSymbolDefNode()
}

// indirectSymbolDefNode() ensures that only the following types can be
// assigned to IndirectSymbolDef.
//
func (AliasDef) indirectSymbolDefNode() {}
func (IFuncDef) indirectSymbolDefNode() {}

type Instruction interface {
	LlvmNode
	instructionNode()
}

// instructionNode() ensures that only the following types can be
// assigned to Instruction.
//
func (AShrInst) instructionNode() {}
func (AddInst) instructionNode() {}
func (AddrSpaceCastInst) instructionNode() {}
func (AllocaInst) instructionNode() {}
func (AndInst) instructionNode() {}
func (AtomicRMWInst) instructionNode() {}
func (BitCastInst) instructionNode() {}
func (CallInst) instructionNode() {}
func (CatchPadInst) instructionNode() {}
func (CleanupPadInst) instructionNode() {}
func (CmpXchgInst) instructionNode() {}
func (ExtractElementInst) instructionNode() {}
func (ExtractValueInst) instructionNode() {}
func (FAddInst) instructionNode() {}
func (FCmpInst) instructionNode() {}
func (FDivInst) instructionNode() {}
func (FMulInst) instructionNode() {}
func (FPExtInst) instructionNode() {}
func (FPToSIInst) instructionNode() {}
func (FPToUIInst) instructionNode() {}
func (FPTruncInst) instructionNode() {}
func (FRemInst) instructionNode() {}
func (FSubInst) instructionNode() {}
func (FenceInst) instructionNode() {}
func (GetElementPtrInst) instructionNode() {}
func (ICmpInst) instructionNode() {}
func (InsertElementInst) instructionNode() {}
func (InsertValueInst) instructionNode() {}
func (IntToPtrInst) instructionNode() {}
func (LShrInst) instructionNode() {}
func (LandingPadInst) instructionNode() {}
func (LoadInst) instructionNode() {}
func (LocalDefInst) instructionNode() {}
func (MulInst) instructionNode() {}
func (OrInst) instructionNode() {}
func (PhiInst) instructionNode() {}
func (PtrToIntInst) instructionNode() {}
func (SDivInst) instructionNode() {}
func (SExtInst) instructionNode() {}
func (SIToFPInst) instructionNode() {}
func (SRemInst) instructionNode() {}
func (SelectInst) instructionNode() {}
func (ShlInst) instructionNode() {}
func (ShuffleVectorInst) instructionNode() {}
func (StoreInst) instructionNode() {}
func (SubInst) instructionNode() {}
func (TruncInst) instructionNode() {}
func (UDivInst) instructionNode() {}
func (UIToFPInst) instructionNode() {}
func (URemInst) instructionNode() {}
func (VAArgInst) instructionNode() {}
func (XorInst) instructionNode() {}
func (ZExtInst) instructionNode() {}

type MDField interface {
	LlvmNode
	mDFieldNode()
}

// mDFieldNode() ensures that only the following types can be
// assigned to MDField.
//
func (DIBasicType) mDFieldNode() {}
func (DICompileUnit) mDFieldNode() {}
func (DICompositeType) mDFieldNode() {}
func (DIDerivedType) mDFieldNode() {}
func (DIEnumerator) mDFieldNode() {}
func (DIExpression) mDFieldNode() {}
func (DIFile) mDFieldNode() {}
func (DIGlobalVariable) mDFieldNode() {}
func (DIGlobalVariableExpression) mDFieldNode() {}
func (DIImportedEntity) mDFieldNode() {}
func (DILabel) mDFieldNode() {}
func (DILexicalBlock) mDFieldNode() {}
func (DILexicalBlockFile) mDFieldNode() {}
func (DILocalVariable) mDFieldNode() {}
func (DILocation) mDFieldNode() {}
func (DIMacro) mDFieldNode() {}
func (DIMacroFile) mDFieldNode() {}
func (DIModule) mDFieldNode() {}
func (DINamespace) mDFieldNode() {}
func (DIObjCProperty) mDFieldNode() {}
func (DISubprogram) mDFieldNode() {}
func (DISubrange) mDFieldNode() {}
func (DISubroutineType) mDFieldNode() {}
func (DITemplateTypeParameter) mDFieldNode() {}
func (DITemplateValueParameter) mDFieldNode() {}
func (GenericDINode) mDFieldNode() {}
func (MDString) mDFieldNode() {}
func (MDTuple) mDFieldNode() {}
func (MetadataID) mDFieldNode() {}
func (NullLit) mDFieldNode() {}
func (TypeValue) mDFieldNode() {}

type MDFieldOrInt interface {
	LlvmNode
	mDFieldOrIntNode()
}

// mDFieldOrIntNode() ensures that only the following types can be
// assigned to MDFieldOrInt.
//
func (DIBasicType) mDFieldOrIntNode() {}
func (DICompileUnit) mDFieldOrIntNode() {}
func (DICompositeType) mDFieldOrIntNode() {}
func (DIDerivedType) mDFieldOrIntNode() {}
func (DIEnumerator) mDFieldOrIntNode() {}
func (DIExpression) mDFieldOrIntNode() {}
func (DIFile) mDFieldOrIntNode() {}
func (DIGlobalVariable) mDFieldOrIntNode() {}
func (DIGlobalVariableExpression) mDFieldOrIntNode() {}
func (DIImportedEntity) mDFieldOrIntNode() {}
func (DILabel) mDFieldOrIntNode() {}
func (DILexicalBlock) mDFieldOrIntNode() {}
func (DILexicalBlockFile) mDFieldOrIntNode() {}
func (DILocalVariable) mDFieldOrIntNode() {}
func (DILocation) mDFieldOrIntNode() {}
func (DIMacro) mDFieldOrIntNode() {}
func (DIMacroFile) mDFieldOrIntNode() {}
func (DIModule) mDFieldOrIntNode() {}
func (DINamespace) mDFieldOrIntNode() {}
func (DIObjCProperty) mDFieldOrIntNode() {}
func (DISubprogram) mDFieldOrIntNode() {}
func (DISubrange) mDFieldOrIntNode() {}
func (DISubroutineType) mDFieldOrIntNode() {}
func (DITemplateTypeParameter) mDFieldOrIntNode() {}
func (DITemplateValueParameter) mDFieldOrIntNode() {}
func (GenericDINode) mDFieldOrIntNode() {}
func (IntLit) mDFieldOrIntNode() {}
func (MDString) mDFieldOrIntNode() {}
func (MDTuple) mDFieldOrIntNode() {}
func (MetadataID) mDFieldOrIntNode() {}
func (NullLit) mDFieldOrIntNode() {}
func (TypeValue) mDFieldOrIntNode() {}

type MDNode interface {
	LlvmNode
	mDNodeNode()
}

// mDNodeNode() ensures that only the following types can be
// assigned to MDNode.
//
func (DIBasicType) mDNodeNode() {}
func (DICompileUnit) mDNodeNode() {}
func (DICompositeType) mDNodeNode() {}
func (DIDerivedType) mDNodeNode() {}
func (DIEnumerator) mDNodeNode() {}
func (DIExpression) mDNodeNode() {}
func (DIFile) mDNodeNode() {}
func (DIGlobalVariable) mDNodeNode() {}
func (DIGlobalVariableExpression) mDNodeNode() {}
func (DIImportedEntity) mDNodeNode() {}
func (DILabel) mDNodeNode() {}
func (DILexicalBlock) mDNodeNode() {}
func (DILexicalBlockFile) mDNodeNode() {}
func (DILocalVariable) mDNodeNode() {}
func (DILocation) mDNodeNode() {}
func (DIMacro) mDNodeNode() {}
func (DIMacroFile) mDNodeNode() {}
func (DIModule) mDNodeNode() {}
func (DINamespace) mDNodeNode() {}
func (DIObjCProperty) mDNodeNode() {}
func (DISubprogram) mDNodeNode() {}
func (DISubrange) mDNodeNode() {}
func (DISubroutineType) mDNodeNode() {}
func (DITemplateTypeParameter) mDNodeNode() {}
func (DITemplateValueParameter) mDNodeNode() {}
func (GenericDINode) mDNodeNode() {}
func (MDTuple) mDNodeNode() {}
func (MetadataID) mDNodeNode() {}

type Metadata interface {
	LlvmNode
	metadataNode()
}

// metadataNode() ensures that only the following types can be
// assigned to Metadata.
//
func (DIBasicType) metadataNode() {}
func (DICompileUnit) metadataNode() {}
func (DICompositeType) metadataNode() {}
func (DIDerivedType) metadataNode() {}
func (DIEnumerator) metadataNode() {}
func (DIExpression) metadataNode() {}
func (DIFile) metadataNode() {}
func (DIGlobalVariable) metadataNode() {}
func (DIGlobalVariableExpression) metadataNode() {}
func (DIImportedEntity) metadataNode() {}
func (DILabel) metadataNode() {}
func (DILexicalBlock) metadataNode() {}
func (DILexicalBlockFile) metadataNode() {}
func (DILocalVariable) metadataNode() {}
func (DILocation) metadataNode() {}
func (DIMacro) metadataNode() {}
func (DIMacroFile) metadataNode() {}
func (DIModule) metadataNode() {}
func (DINamespace) metadataNode() {}
func (DIObjCProperty) metadataNode() {}
func (DISubprogram) metadataNode() {}
func (DISubrange) metadataNode() {}
func (DISubroutineType) metadataNode() {}
func (DITemplateTypeParameter) metadataNode() {}
func (DITemplateValueParameter) metadataNode() {}
func (GenericDINode) metadataNode() {}
func (MDString) metadataNode() {}
func (MDTuple) metadataNode() {}
func (MetadataID) metadataNode() {}
func (TypeValue) metadataNode() {}

type MetadataNode interface {
	LlvmNode
	metadataNodeNode()
}

// metadataNodeNode() ensures that only the following types can be
// assigned to MetadataNode.
//
func (DIExpression) metadataNodeNode() {}
func (MetadataID) metadataNodeNode() {}

type ParamAttr interface {
	LlvmNode
	paramAttrNode()
}

// paramAttrNode() ensures that only the following types can be
// assigned to ParamAttr.
//
func (Alignment) paramAttrNode() {}
func (AttrPair) paramAttrNode() {}
func (AttrString) paramAttrNode() {}
func (Dereferenceable) paramAttrNode() {}
func (ParamAttribute) paramAttrNode() {}

type ReturnAttr interface {
	LlvmNode
	returnAttrNode()
}

// returnAttrNode() ensures that only the following types can be
// assigned to ReturnAttr.
//
func (Alignment) returnAttrNode() {}
func (Dereferenceable) returnAttrNode() {}
func (ReturnAttribute) returnAttrNode() {}

type SpecializedMDNode interface {
	LlvmNode
	specializedMDNodeNode()
}

// specializedMDNodeNode() ensures that only the following types can be
// assigned to SpecializedMDNode.
//
func (DIBasicType) specializedMDNodeNode() {}
func (DICompileUnit) specializedMDNodeNode() {}
func (DICompositeType) specializedMDNodeNode() {}
func (DIDerivedType) specializedMDNodeNode() {}
func (DIEnumerator) specializedMDNodeNode() {}
func (DIExpression) specializedMDNodeNode() {}
func (DIFile) specializedMDNodeNode() {}
func (DIGlobalVariable) specializedMDNodeNode() {}
func (DIGlobalVariableExpression) specializedMDNodeNode() {}
func (DIImportedEntity) specializedMDNodeNode() {}
func (DILabel) specializedMDNodeNode() {}
func (DILexicalBlock) specializedMDNodeNode() {}
func (DILexicalBlockFile) specializedMDNodeNode() {}
func (DILocalVariable) specializedMDNodeNode() {}
func (DILocation) specializedMDNodeNode() {}
func (DIMacro) specializedMDNodeNode() {}
func (DIMacroFile) specializedMDNodeNode() {}
func (DIModule) specializedMDNodeNode() {}
func (DINamespace) specializedMDNodeNode() {}
func (DIObjCProperty) specializedMDNodeNode() {}
func (DISubprogram) specializedMDNodeNode() {}
func (DISubrange) specializedMDNodeNode() {}
func (DISubroutineType) specializedMDNodeNode() {}
func (DITemplateTypeParameter) specializedMDNodeNode() {}
func (DITemplateValueParameter) specializedMDNodeNode() {}
func (GenericDINode) specializedMDNodeNode() {}

type TargetDef interface {
	LlvmNode
	targetDefNode()
}

// targetDefNode() ensures that only the following types can be
// assigned to TargetDef.
//
func (TargetDataLayout) targetDefNode() {}
func (TargetTriple) targetDefNode() {}

type Terminator interface {
	LlvmNode
	terminatorNode()
}

// terminatorNode() ensures that only the following types can be
// assigned to Terminator.
//
func (BrTerm) terminatorNode() {}
func (CatchRetTerm) terminatorNode() {}
func (CatchSwitchTerm) terminatorNode() {}
func (CleanupRetTerm) terminatorNode() {}
func (CondBrTerm) terminatorNode() {}
func (IndirectBrTerm) terminatorNode() {}
func (InvokeTerm) terminatorNode() {}
func (LocalDefTerm) terminatorNode() {}
func (ResumeTerm) terminatorNode() {}
func (RetTerm) terminatorNode() {}
func (SwitchTerm) terminatorNode() {}
func (UnreachableTerm) terminatorNode() {}

type TopLevelEntity interface {
	LlvmNode
	topLevelEntityNode()
}

// topLevelEntityNode() ensures that only the following types can be
// assigned to TopLevelEntity.
//
func (AliasDef) topLevelEntityNode() {}
func (AttrGroupDef) topLevelEntityNode() {}
func (ComdatDef) topLevelEntityNode() {}
func (FuncDecl) topLevelEntityNode() {}
func (FuncDef) topLevelEntityNode() {}
func (GlobalDecl) topLevelEntityNode() {}
func (GlobalDef) topLevelEntityNode() {}
func (IFuncDef) topLevelEntityNode() {}
func (MetadataDef) topLevelEntityNode() {}
func (ModuleAsm) topLevelEntityNode() {}
func (NamedMetadataDef) topLevelEntityNode() {}
func (SourceFilename) topLevelEntityNode() {}
func (TargetDataLayout) topLevelEntityNode() {}
func (TargetTriple) topLevelEntityNode() {}
func (TypeDef) topLevelEntityNode() {}
func (UseListOrder) topLevelEntityNode() {}
func (UseListOrderBB) topLevelEntityNode() {}

type Type interface {
	LlvmNode
	typeNode()
}

// typeNode() ensures that only the following types can be
// assigned to Type.
//
func (ArrayType) typeNode() {}
func (FloatType) typeNode() {}
func (FuncType) typeNode() {}
func (IntType) typeNode() {}
func (LabelType) typeNode() {}
func (MMXType) typeNode() {}
func (MetadataType) typeNode() {}
func (NamedType) typeNode() {}
func (PackedStructType) typeNode() {}
func (PointerType) typeNode() {}
func (StructType) typeNode() {}
func (TokenType) typeNode() {}
func (VectorType) typeNode() {}
func (VoidType) typeNode() {}

type Value interface {
	LlvmNode
	valueNode()
}

// valueNode() ensures that only the following types can be
// assigned to Value.
//
func (AShrExpr) valueNode() {}
func (AddExpr) valueNode() {}
func (AddrSpaceCastExpr) valueNode() {}
func (AndExpr) valueNode() {}
func (ArrayConst) valueNode() {}
func (BitCastExpr) valueNode() {}
func (BlockAddressConst) valueNode() {}
func (BoolConst) valueNode() {}
func (CharArrayConst) valueNode() {}
func (ExtractElementExpr) valueNode() {}
func (ExtractValueExpr) valueNode() {}
func (FAddExpr) valueNode() {}
func (FCmpExpr) valueNode() {}
func (FDivExpr) valueNode() {}
func (FMulExpr) valueNode() {}
func (FPExtExpr) valueNode() {}
func (FPToSIExpr) valueNode() {}
func (FPToUIExpr) valueNode() {}
func (FPTruncExpr) valueNode() {}
func (FRemExpr) valueNode() {}
func (FSubExpr) valueNode() {}
func (FloatConst) valueNode() {}
func (GetElementPtrExpr) valueNode() {}
func (GlobalIdent) valueNode() {}
func (ICmpExpr) valueNode() {}
func (InlineAsm) valueNode() {}
func (InsertElementExpr) valueNode() {}
func (InsertValueExpr) valueNode() {}
func (IntConst) valueNode() {}
func (IntToPtrExpr) valueNode() {}
func (LShrExpr) valueNode() {}
func (LocalIdent) valueNode() {}
func (MulExpr) valueNode() {}
func (NoneConst) valueNode() {}
func (NullConst) valueNode() {}
func (OrExpr) valueNode() {}
func (PtrToIntExpr) valueNode() {}
func (SDivExpr) valueNode() {}
func (SExtExpr) valueNode() {}
func (SIToFPExpr) valueNode() {}
func (SRemExpr) valueNode() {}
func (SelectExpr) valueNode() {}
func (ShlExpr) valueNode() {}
func (ShuffleVectorExpr) valueNode() {}
func (StructConst) valueNode() {}
func (SubExpr) valueNode() {}
func (TruncExpr) valueNode() {}
func (UDivExpr) valueNode() {}
func (UIToFPExpr) valueNode() {}
func (URemExpr) valueNode() {}
func (UndefConst) valueNode() {}
func (VectorConst) valueNode() {}
func (XorExpr) valueNode() {}
func (ZExtExpr) valueNode() {}
func (ZeroInitializerConst) valueNode() {}

type ValueInstruction interface {
	LlvmNode
	valueInstructionNode()
}

// valueInstructionNode() ensures that only the following types can be
// assigned to ValueInstruction.
//
func (AShrInst) valueInstructionNode() {}
func (AddInst) valueInstructionNode() {}
func (AddrSpaceCastInst) valueInstructionNode() {}
func (AllocaInst) valueInstructionNode() {}
func (AndInst) valueInstructionNode() {}
func (AtomicRMWInst) valueInstructionNode() {}
func (BitCastInst) valueInstructionNode() {}
func (CallInst) valueInstructionNode() {}
func (CatchPadInst) valueInstructionNode() {}
func (CleanupPadInst) valueInstructionNode() {}
func (CmpXchgInst) valueInstructionNode() {}
func (ExtractElementInst) valueInstructionNode() {}
func (ExtractValueInst) valueInstructionNode() {}
func (FAddInst) valueInstructionNode() {}
func (FCmpInst) valueInstructionNode() {}
func (FDivInst) valueInstructionNode() {}
func (FMulInst) valueInstructionNode() {}
func (FPExtInst) valueInstructionNode() {}
func (FPToSIInst) valueInstructionNode() {}
func (FPToUIInst) valueInstructionNode() {}
func (FPTruncInst) valueInstructionNode() {}
func (FRemInst) valueInstructionNode() {}
func (FSubInst) valueInstructionNode() {}
func (GetElementPtrInst) valueInstructionNode() {}
func (ICmpInst) valueInstructionNode() {}
func (InsertElementInst) valueInstructionNode() {}
func (InsertValueInst) valueInstructionNode() {}
func (IntToPtrInst) valueInstructionNode() {}
func (LShrInst) valueInstructionNode() {}
func (LandingPadInst) valueInstructionNode() {}
func (LoadInst) valueInstructionNode() {}
func (MulInst) valueInstructionNode() {}
func (OrInst) valueInstructionNode() {}
func (PhiInst) valueInstructionNode() {}
func (PtrToIntInst) valueInstructionNode() {}
func (SDivInst) valueInstructionNode() {}
func (SExtInst) valueInstructionNode() {}
func (SIToFPInst) valueInstructionNode() {}
func (SRemInst) valueInstructionNode() {}
func (SelectInst) valueInstructionNode() {}
func (ShlInst) valueInstructionNode() {}
func (ShuffleVectorInst) valueInstructionNode() {}
func (SubInst) valueInstructionNode() {}
func (TruncInst) valueInstructionNode() {}
func (UDivInst) valueInstructionNode() {}
func (UIToFPInst) valueInstructionNode() {}
func (URemInst) valueInstructionNode() {}
func (VAArgInst) valueInstructionNode() {}
func (XorInst) valueInstructionNode() {}
func (ZExtInst) valueInstructionNode() {}

type ValueTerminator interface {
	LlvmNode
	valueTerminatorNode()
}

// valueTerminatorNode() ensures that only the following types can be
// assigned to ValueTerminator.
//
func (CatchSwitchTerm) valueTerminatorNode() {}
func (InvokeTerm) valueTerminatorNode() {}

// Types.

type AShrExpr struct {
	*Node
}

func (n AShrExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n AShrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AShrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AShrInst struct {
	*Node
}

func (n AShrInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n AShrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AShrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AShrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AddExpr struct {
	*Node
}

func (n AddExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n AddExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AddExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AddInst struct {
	*Node
}

func (n AddInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n AddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AddInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AddrSpace struct {
	*Node
}

func (n AddrSpace) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AddrSpaceCastExpr struct {
	*Node
}

func (n AddrSpaceCastExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AddrSpaceCastExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type AddrSpaceCastInst struct {
	*Node
}

func (n AddrSpaceCastInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AddrSpaceCastInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AddrSpaceCastInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AliasDef struct {
	*Node
}

func (n AliasDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n AliasDef) ExternLinkage() *ExternLinkage {
	if child := n.Child(selector.ExternLinkage); child != nil {
		return &ExternLinkage{child}
	}
	return nil
}

func (n AliasDef) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n AliasDef) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n AliasDef) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n AliasDef) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n AliasDef) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n AliasDef) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n AliasDef) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AliasDef) AliaseeType() Type {
	return ToLlvmNode(n.Child(selector.Type).Next(selector.Type)).(Type)
}

func (n AliasDef) Aliasee() Constant {
	return ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
}

type AlignField struct {
	*Node
}

func (n AlignField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type AlignPair struct {
	*Node
}

func (n AlignPair) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AlignStack struct {
	*Node
}

type AlignStackPair struct {
	*Node
}

func (n AlignStackPair) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type Alignment struct {
	*Node
}

func (n Alignment) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type AllocSize struct {
	*Node
}

func (n AllocSize) ElemSize() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n AllocSize) N() *UintLit {
	if child := n.Child(selector.UintLit).Next(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type AllocaInst struct {
	*Node
}

func (n AllocaInst) InAlloca() *InAlloca {
	if child := n.Child(selector.InAlloca); child != nil {
		return &InAlloca{child}
	}
	return nil
}

func (n AllocaInst) SwiftError() *SwiftError {
	if child := n.Child(selector.SwiftError); child != nil {
		return &SwiftError{child}
	}
	return nil
}

func (n AllocaInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n AllocaInst) NElems() *TypeValue {
	if child := n.Child(selector.TypeValue); child != nil {
		return &TypeValue{child}
	}
	return nil
}

func (n AllocaInst) Alignment() *Alignment {
	if child := n.Child(selector.Alignment); child != nil {
		return &Alignment{child}
	}
	return nil
}

func (n AllocaInst) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n AllocaInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AndExpr struct {
	*Node
}

func (n AndExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n AndExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type AndInst struct {
	*Node
}

func (n AndInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AndInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n AndInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type Arg struct {
	*Node
}

func (n Arg) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType))).(LlvmNode)
}

func (n Arg) Attrs() []ParamAttr {
	nodes := n.Children(selector.ParamAttr)
	var ret = make([]ParamAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ParamAttr))
	}
	return ret
}

func (n Arg) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.AShrExpr, ll.AddExpr, ll.AddrSpaceCastExpr, ll.AndExpr, ll.ArrayConst, ll.BitCastExpr, ll.BlockAddressConst, ll.BoolConst, ll.CharArrayConst, ll.DIBasicType, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.ExtractElementExpr, ll.ExtractValueExpr, ll.FAddExpr, ll.FCmpExpr, ll.FDivExpr, ll.FMulExpr, ll.FPExtExpr, ll.FPToSIExpr, ll.FPToUIExpr, ll.FPTruncExpr, ll.FRemExpr, ll.FSubExpr, ll.FloatConst, ll.GenericDINode, ll.GetElementPtrExpr, ll.GlobalIdent, ll.ICmpExpr, ll.InlineAsm, ll.InsertElementExpr, ll.InsertValueExpr, ll.IntConst, ll.IntToPtrExpr, ll.LShrExpr, ll.LocalIdent, ll.MDString, ll.MDTuple, ll.MetadataID, ll.MulExpr, ll.NoneConst, ll.NullConst, ll.OrExpr, ll.PtrToIntExpr, ll.SDivExpr, ll.SExtExpr, ll.SIToFPExpr, ll.SRemExpr, ll.SelectExpr, ll.ShlExpr, ll.ShuffleVectorExpr, ll.StructConst, ll.SubExpr, ll.TruncExpr, ll.TypeValue, ll.UDivExpr, ll.UIToFPExpr, ll.URemExpr, ll.UndefConst, ll.VectorConst, ll.XorExpr, ll.ZExtExpr, ll.ZeroInitializerConst))).(LlvmNode)
}

type ArgField struct {
	*Node
}

func (n ArgField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Args struct {
	*Node
}

func (n Args) Args() []Arg {
	nodes := n.Children(selector.Arg)
	var ret = make([]Arg, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Arg{node})
	}
	return ret
}

type ArrayConst struct {
	*Node
}

func (n ArrayConst) Elems() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var ret = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeConst{node})
	}
	return ret
}

type ArrayType struct {
	*Node
}

func (n ArrayType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n ArrayType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type Atomic struct {
	*Node
}

type AtomicOp struct {
	*Node
}

type AtomicOrdering struct {
	*Node
}

type AtomicRMWInst struct {
	*Node
}

func (n AtomicRMWInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n AtomicRMWInst) Op() AtomicOp {
	return AtomicOp{n.Child(selector.AtomicOp)}
}

func (n AtomicRMWInst) Dst() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n AtomicRMWInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n AtomicRMWInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n AtomicRMWInst) Ordering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n AtomicRMWInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type AttrGroupDef struct {
	*Node
}

func (n AttrGroupDef) Name() AttrGroupID {
	return AttrGroupID{n.Child(selector.AttrGroupID)}
}

func (n AttrGroupDef) Attrs() []FuncAttr {
	nodes := n.Child(selector.AttrGroupID).NextAll(selector.FuncAttr)
	var ret = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttr))
	}
	return ret
}

type AttrGroupID struct {
	*Node
}

type AttrPair struct {
	*Node
}

func (n AttrPair) Key() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n AttrPair) Val() StringLit {
	return StringLit{n.Child(selector.StringLit).Next(selector.StringLit)}
}

type AttrString struct {
	*Node
}

func (n AttrString) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type AttributesField struct {
	*Node
}

func (n AttributesField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type BaseTypeField struct {
	*Node
}

func (n BaseTypeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type BasicBlock struct {
	*Node
}

func (n BasicBlock) Name() *LabelIdent {
	if child := n.Child(selector.LabelIdent); child != nil {
		return &LabelIdent{child}
	}
	return nil
}

func (n BasicBlock) Insts() []Instruction {
	nodes := n.Children(selector.Instruction)
	var ret = make([]Instruction, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(Instruction))
	}
	return ret
}

func (n BasicBlock) Term() Terminator {
	return ToLlvmNode(n.Child(selector.Terminator)).(Terminator)
}

type BitCastExpr struct {
	*Node
}

func (n BitCastExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n BitCastExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type BitCastInst struct {
	*Node
}

func (n BitCastInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n BitCastInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n BitCastInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type BlockAddressConst struct {
	*Node
}

func (n BlockAddressConst) Func() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n BlockAddressConst) Block() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type BoolConst struct {
	*Node
}

func (n BoolConst) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type BoolLit struct {
	*Node
}

type BrTerm struct {
	*Node
}

func (n BrTerm) Target() Label {
	return Label{n.Child(selector.Label)}
}

func (n BrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CCField struct {
	*Node
}

func (n CCField) DwarfCC() DwarfCC {
	return DwarfCC{n.Child(selector.DwarfCC)}
}

type CallInst struct {
	*Node
}

func (n CallInst) Tail() *Tail {
	if child := n.Child(selector.Tail); child != nil {
		return &Tail{child}
	}
	return nil
}

func (n CallInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n CallInst) CallingConv() CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return ToLlvmNode(child).(CallingConv)
	}
	return nil
}

func (n CallInst) ReturnAttrs() []ReturnAttr {
	nodes := n.Children(selector.ReturnAttr)
	var ret = make([]ReturnAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttr))
	}
	return ret
}

func (n CallInst) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n CallInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n CallInst) Callee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CallInst) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n CallInst) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var ret = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttr))
	}
	return ret
}

func (n CallInst) OperandBundles() []OperandBundle {
	nodes := n.Children(selector.OperandBundle)
	var ret = make([]OperandBundle, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OperandBundle{node})
	}
	return ret
}

func (n CallInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CallingConvEnum struct {
	*Node
}

type CallingConvInt struct {
	*Node
}

func (n CallingConvInt) UintLit() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type Case struct {
	*Node
}

func (n Case) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n Case) Target() Label {
	return Label{n.Child(selector.Label)}
}

type CatchPadInst struct {
	*Node
}

func (n CatchPadInst) Scope() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n CatchPadInst) Args() []ExceptionArg {
	nodes := n.Children(selector.ExceptionArg)
	var ret = make([]ExceptionArg, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ExceptionArg{node})
	}
	return ret
}

func (n CatchPadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CatchRetTerm struct {
	*Node
}

func (n CatchRetTerm) From() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CatchRetTerm) To() Label {
	return Label{n.Child(selector.Label)}
}

func (n CatchRetTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CatchSwitchTerm struct {
	*Node
}

func (n CatchSwitchTerm) Scope() ExceptionScope {
	return ToLlvmNode(n.Child(selector.ExceptionScope)).(ExceptionScope)
}

func (n CatchSwitchTerm) Handlers() []Label {
	nodes := n.Children(selector.Label)
	var ret = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Label{node})
	}
	return ret
}

func (n CatchSwitchTerm) UnwindTarget() UnwindTarget {
	return UnwindTarget{n.Child(selector.UnwindTarget)}
}

func (n CatchSwitchTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CharArrayConst struct {
	*Node
}

func (n CharArrayConst) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ChecksumField struct {
	*Node
}

func (n ChecksumField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ChecksumKind struct {
	*Node
}

type ChecksumkindField struct {
	*Node
}

func (n ChecksumkindField) ChecksumKind() ChecksumKind {
	return ChecksumKind{n.Child(selector.ChecksumKind)}
}

type Clause struct {
	*Node
}

func (n Clause) ClauseType() ClauseType {
	return ClauseType{n.Child(selector.ClauseType)}
}

func (n Clause) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

type ClauseType struct {
	*Node
}

type Cleanup struct {
	*Node
}

type CleanupPadInst struct {
	*Node
}

func (n CleanupPadInst) Scope() ExceptionScope {
	return ToLlvmNode(n.Child(selector.ExceptionScope)).(ExceptionScope)
}

func (n CleanupPadInst) Args() []ExceptionArg {
	nodes := n.Children(selector.ExceptionArg)
	var ret = make([]ExceptionArg, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ExceptionArg{node})
	}
	return ret
}

func (n CleanupPadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CleanupRetTerm struct {
	*Node
}

func (n CleanupRetTerm) From() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CleanupRetTerm) UnwindTarget() UnwindTarget {
	return UnwindTarget{n.Child(selector.UnwindTarget)}
}

func (n CleanupRetTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type CmpXchgInst struct {
	*Node
}

func (n CmpXchgInst) Weak() *Weak {
	if child := n.Child(selector.Weak); child != nil {
		return &Weak{child}
	}
	return nil
}

func (n CmpXchgInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n CmpXchgInst) Ptr() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n CmpXchgInst) Cmp() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n CmpXchgInst) New() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n CmpXchgInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n CmpXchgInst) SuccessOrdering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n CmpXchgInst) FailureOrdering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering).Next(selector.AtomicOrdering)}
}

func (n CmpXchgInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ColumnField struct {
	*Node
}

func (n ColumnField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Comdat struct {
	*Node
}

func (n Comdat) Name() *ComdatName {
	if child := n.Child(selector.ComdatName); child != nil {
		return &ComdatName{child}
	}
	return nil
}

type ComdatDef struct {
	*Node
}

func (n ComdatDef) Name() ComdatName {
	return ComdatName{n.Child(selector.ComdatName)}
}

func (n ComdatDef) Kind() SelectionKind {
	return SelectionKind{n.Child(selector.SelectionKind)}
}

type ComdatName struct {
	*Node
}

type CondBrTerm struct {
	*Node
}

func (n CondBrTerm) CondTyp() IntType {
	return IntType{n.Child(selector.IntType)}
}

func (n CondBrTerm) Cond() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n CondBrTerm) TargetTrue() Label {
	return Label{n.Child(selector.Label)}
}

func (n CondBrTerm) TargetFalse() Label {
	return Label{n.Child(selector.Label).Next(selector.Label)}
}

func (n CondBrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ConfigMacrosField struct {
	*Node
}

func (n ConfigMacrosField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ContainingTypeField struct {
	*Node
}

func (n ContainingTypeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type CountField struct {
	*Node
}

func (n CountField) MDFieldOrInt() MDFieldOrInt {
	return ToLlvmNode(n.Child(selector.MDFieldOrInt)).(MDFieldOrInt)
}

type DIBasicType struct {
	*Node
}

func (n DIBasicType) Fields() []DIBasicTypeField {
	nodes := n.Children(selector.DIBasicTypeField)
	var ret = make([]DIBasicTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIBasicTypeField))
	}
	return ret
}

type DICompileUnit struct {
	*Node
}

func (n DICompileUnit) Fields() []DICompileUnitField {
	nodes := n.Children(selector.DICompileUnitField)
	var ret = make([]DICompileUnitField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DICompileUnitField))
	}
	return ret
}

type DICompositeType struct {
	*Node
}

func (n DICompositeType) Fields() []DICompositeTypeField {
	nodes := n.Children(selector.DICompositeTypeField)
	var ret = make([]DICompositeTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DICompositeTypeField))
	}
	return ret
}

type DIDerivedType struct {
	*Node
}

func (n DIDerivedType) Fields() []DIDerivedTypeField {
	nodes := n.Children(selector.DIDerivedTypeField)
	var ret = make([]DIDerivedTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIDerivedTypeField))
	}
	return ret
}

type DIEnumerator struct {
	*Node
}

func (n DIEnumerator) Fields() []DIEnumeratorField {
	nodes := n.Children(selector.DIEnumeratorField)
	var ret = make([]DIEnumeratorField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIEnumeratorField))
	}
	return ret
}

type DIExpression struct {
	*Node
}

func (n DIExpression) Fields() []DIExpressionField {
	nodes := n.Children(selector.DIExpressionField)
	var ret = make([]DIExpressionField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIExpressionField))
	}
	return ret
}

type DIFile struct {
	*Node
}

func (n DIFile) Fields() []DIFileField {
	nodes := n.Children(selector.DIFileField)
	var ret = make([]DIFileField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIFileField))
	}
	return ret
}

type DIFlag struct {
	*Node
}

func (n DIFlag) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DIFlags struct {
	*Node
}

func (n DIFlags) Flags() []DIFlag {
	nodes := n.Children(selector.DIFlag)
	var ret = make([]DIFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, DIFlag{node})
	}
	return ret
}

type DIGlobalVariable struct {
	*Node
}

func (n DIGlobalVariable) Fields() []DIGlobalVariableField {
	nodes := n.Children(selector.DIGlobalVariableField)
	var ret = make([]DIGlobalVariableField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIGlobalVariableField))
	}
	return ret
}

type DIGlobalVariableExpression struct {
	*Node
}

func (n DIGlobalVariableExpression) Fields() []DIGlobalVariableExpressionField {
	nodes := n.Children(selector.DIGlobalVariableExpressionField)
	var ret = make([]DIGlobalVariableExpressionField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIGlobalVariableExpressionField))
	}
	return ret
}

type DIImportedEntity struct {
	*Node
}

func (n DIImportedEntity) Fields() []DIImportedEntityField {
	nodes := n.Children(selector.DIImportedEntityField)
	var ret = make([]DIImportedEntityField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIImportedEntityField))
	}
	return ret
}

type DILabel struct {
	*Node
}

func (n DILabel) Fields() []DILabelField {
	nodes := n.Children(selector.DILabelField)
	var ret = make([]DILabelField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILabelField))
	}
	return ret
}

type DILexicalBlock struct {
	*Node
}

func (n DILexicalBlock) Fields() []DILexicalBlockField {
	nodes := n.Children(selector.DILexicalBlockField)
	var ret = make([]DILexicalBlockField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILexicalBlockField))
	}
	return ret
}

type DILexicalBlockFile struct {
	*Node
}

func (n DILexicalBlockFile) Fields() []DILexicalBlockFileField {
	nodes := n.Children(selector.DILexicalBlockFileField)
	var ret = make([]DILexicalBlockFileField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILexicalBlockFileField))
	}
	return ret
}

type DILocalVariable struct {
	*Node
}

func (n DILocalVariable) Fields() []DILocalVariableField {
	nodes := n.Children(selector.DILocalVariableField)
	var ret = make([]DILocalVariableField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILocalVariableField))
	}
	return ret
}

type DILocation struct {
	*Node
}

func (n DILocation) Fields() []DILocationField {
	nodes := n.Children(selector.DILocationField)
	var ret = make([]DILocationField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DILocationField))
	}
	return ret
}

type DIMacro struct {
	*Node
}

func (n DIMacro) Fields() []DIMacroField {
	nodes := n.Children(selector.DIMacroField)
	var ret = make([]DIMacroField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIMacroField))
	}
	return ret
}

type DIMacroFile struct {
	*Node
}

func (n DIMacroFile) Fields() []DIMacroFileField {
	nodes := n.Children(selector.DIMacroFileField)
	var ret = make([]DIMacroFileField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIMacroFileField))
	}
	return ret
}

type DIModule struct {
	*Node
}

func (n DIModule) Fields() []DIModuleField {
	nodes := n.Children(selector.DIModuleField)
	var ret = make([]DIModuleField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIModuleField))
	}
	return ret
}

type DINamespace struct {
	*Node
}

func (n DINamespace) Fields() []DINamespaceField {
	nodes := n.Children(selector.DINamespaceField)
	var ret = make([]DINamespaceField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DINamespaceField))
	}
	return ret
}

type DIObjCProperty struct {
	*Node
}

func (n DIObjCProperty) Fields() []DIObjCPropertyField {
	nodes := n.Children(selector.DIObjCPropertyField)
	var ret = make([]DIObjCPropertyField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DIObjCPropertyField))
	}
	return ret
}

type DISubprogram struct {
	*Node
}

func (n DISubprogram) Fields() []DISubprogramField {
	nodes := n.Children(selector.DISubprogramField)
	var ret = make([]DISubprogramField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISubprogramField))
	}
	return ret
}

type DISubrange struct {
	*Node
}

func (n DISubrange) Fields() []DISubrangeField {
	nodes := n.Children(selector.DISubrangeField)
	var ret = make([]DISubrangeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISubrangeField))
	}
	return ret
}

type DISubroutineType struct {
	*Node
}

func (n DISubroutineType) Fields() []DISubroutineTypeField {
	nodes := n.Children(selector.DISubroutineTypeField)
	var ret = make([]DISubroutineTypeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DISubroutineTypeField))
	}
	return ret
}

type DITemplateTypeParameter struct {
	*Node
}

func (n DITemplateTypeParameter) Fields() []DITemplateTypeParameterField {
	nodes := n.Children(selector.DITemplateTypeParameterField)
	var ret = make([]DITemplateTypeParameterField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DITemplateTypeParameterField))
	}
	return ret
}

type DITemplateValueParameter struct {
	*Node
}

func (n DITemplateValueParameter) Fields() []DITemplateValueParameterField {
	nodes := n.Children(selector.DITemplateValueParameterField)
	var ret = make([]DITemplateValueParameterField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(DITemplateValueParameterField))
	}
	return ret
}

type DLLStorageClass struct {
	*Node
}

type DebugInfoForProfilingField struct {
	*Node
}

func (n DebugInfoForProfilingField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type DeclarationField struct {
	*Node
}

func (n DeclarationField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Dereferenceable struct {
	*Node
}

func (n Dereferenceable) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type DirectoryField struct {
	*Node
}

func (n DirectoryField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type DiscriminatorField struct {
	*Node
}

func (n DiscriminatorField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type DiscriminatorIntField struct {
	*Node
}

func (n DiscriminatorIntField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Distinct struct {
	*Node
}

type DwarfAddressSpaceField struct {
	*Node
}

func (n DwarfAddressSpaceField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type DwarfAttEncoding struct {
	*Node
}

func (n DwarfAttEncoding) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfCC struct {
	*Node
}

func (n DwarfCC) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfLang struct {
	*Node
}

func (n DwarfLang) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfMacinfo struct {
	*Node
}

func (n DwarfMacinfo) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfOp struct {
	*Node
}

type DwarfTag struct {
	*Node
}

func (n DwarfTag) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwarfVirtuality struct {
	*Node
}

func (n DwarfVirtuality) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type DwoIdField struct {
	*Node
}

func (n DwoIdField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ElementsField struct {
	*Node
}

func (n ElementsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Ellipsis struct {
	*Node
}

type EmissionKind struct {
	*Node
}

func (n EmissionKind) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type EmissionKindField struct {
	*Node
}

func (n EmissionKindField) EmissionKind() EmissionKind {
	return EmissionKind{n.Child(selector.EmissionKind)}
}

type EncodingField struct {
	*Node
}

func (n EncodingField) DwarfAttEncoding() DwarfAttEncoding {
	return DwarfAttEncoding{n.Child(selector.DwarfAttEncoding)}
}

type EntityField struct {
	*Node
}

func (n EntityField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type EnumsField struct {
	*Node
}

func (n EnumsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Exact struct {
	*Node
}

type ExceptionArg struct {
	*Node
}

func (n ExceptionArg) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType))).(LlvmNode)
}

func (n ExceptionArg) Val() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.AShrExpr, ll.AddExpr, ll.AddrSpaceCastExpr, ll.AndExpr, ll.ArrayConst, ll.BitCastExpr, ll.BlockAddressConst, ll.BoolConst, ll.CharArrayConst, ll.DIBasicType, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.ExtractElementExpr, ll.ExtractValueExpr, ll.FAddExpr, ll.FCmpExpr, ll.FDivExpr, ll.FMulExpr, ll.FPExtExpr, ll.FPToSIExpr, ll.FPToUIExpr, ll.FPTruncExpr, ll.FRemExpr, ll.FSubExpr, ll.FloatConst, ll.GenericDINode, ll.GetElementPtrExpr, ll.GlobalIdent, ll.ICmpExpr, ll.InlineAsm, ll.InsertElementExpr, ll.InsertValueExpr, ll.IntConst, ll.IntToPtrExpr, ll.LShrExpr, ll.LocalIdent, ll.MDString, ll.MDTuple, ll.MetadataID, ll.MulExpr, ll.NoneConst, ll.NullConst, ll.OrExpr, ll.PtrToIntExpr, ll.SDivExpr, ll.SExtExpr, ll.SIToFPExpr, ll.SRemExpr, ll.SelectExpr, ll.ShlExpr, ll.ShuffleVectorExpr, ll.StructConst, ll.SubExpr, ll.TruncExpr, ll.TypeValue, ll.UDivExpr, ll.UIToFPExpr, ll.URemExpr, ll.UndefConst, ll.VectorConst, ll.XorExpr, ll.ZExtExpr, ll.ZeroInitializerConst))).(LlvmNode)
}

type ExportSymbolsField struct {
	*Node
}

func (n ExportSymbolsField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type ExprField struct {
	*Node
}

func (n ExprField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ExternLinkage struct {
	*Node
}

type ExternallyInitialized struct {
	*Node
}

type ExtraDataField struct {
	*Node
}

func (n ExtraDataField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ExtractElementExpr struct {
	*Node
}

func (n ExtractElementExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ExtractElementExpr) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ExtractElementInst struct {
	*Node
}

func (n ExtractElementInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ExtractElementInst) Index() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ExtractElementInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ExtractValueExpr struct {
	*Node
}

func (n ExtractValueExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ExtractValueExpr) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type ExtractValueInst struct {
	*Node
}

func (n ExtractValueInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ExtractValueInst) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

func (n ExtractValueInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FAddExpr struct {
	*Node
}

func (n FAddExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FAddExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FAddInst struct {
	*Node
}

func (n FAddInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FAddInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FAddInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FAddInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FCmpExpr struct {
	*Node
}

func (n FCmpExpr) Pred() FPred {
	return FPred{n.Child(selector.FPred)}
}

func (n FCmpExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FCmpExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FCmpInst struct {
	*Node
}

func (n FCmpInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FCmpInst) Pred() FPred {
	return FPred{n.Child(selector.FPred)}
}

func (n FCmpInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FCmpInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FCmpInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FDivExpr struct {
	*Node
}

func (n FDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FDivInst struct {
	*Node
}

func (n FDivInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FDivInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FMulExpr struct {
	*Node
}

func (n FMulExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FMulExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FMulInst struct {
	*Node
}

func (n FMulInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FMulInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FMulInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FMulInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPExtExpr struct {
	*Node
}

func (n FPExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPExtInst struct {
	*Node
}

func (n FPExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPExtInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPToSIExpr struct {
	*Node
}

func (n FPToSIExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPToSIExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPToSIInst struct {
	*Node
}

func (n FPToSIInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPToSIInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPToSIInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPToUIExpr struct {
	*Node
}

func (n FPToUIExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPToUIExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPToUIInst struct {
	*Node
}

func (n FPToUIInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPToUIInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPToUIInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPTruncExpr struct {
	*Node
}

func (n FPTruncExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FPTruncExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type FPTruncInst struct {
	*Node
}

func (n FPTruncInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FPTruncInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FPTruncInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FPred struct {
	*Node
}

type FRemExpr struct {
	*Node
}

func (n FRemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FRemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FRemInst struct {
	*Node
}

func (n FRemInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FRemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FRemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FRemInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FSubExpr struct {
	*Node
}

func (n FSubExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n FSubExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type FSubInst struct {
	*Node
}

func (n FSubInst) FastMathFlags() []FastMathFlag {
	nodes := n.Children(selector.FastMathFlag)
	var ret = make([]FastMathFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, FastMathFlag{node})
	}
	return ret
}

func (n FSubInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n FSubInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n FSubInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FastMathFlag struct {
	*Node
}

type FenceInst struct {
	*Node
}

func (n FenceInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n FenceInst) Ordering() AtomicOrdering {
	return AtomicOrdering{n.Child(selector.AtomicOrdering)}
}

func (n FenceInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type FileField struct {
	*Node
}

func (n FileField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type FilenameField struct {
	*Node
}

func (n FilenameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type FlagsField struct {
	*Node
}

func (n FlagsField) DIFlags() DIFlags {
	return DIFlags{n.Child(selector.DIFlags)}
}

type FlagsStringField struct {
	*Node
}

func (n FlagsStringField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type FloatConst struct {
	*Node
}

func (n FloatConst) FloatLit() FloatLit {
	return FloatLit{n.Child(selector.FloatLit)}
}

type FloatKind struct {
	*Node
}

type FloatLit struct {
	*Node
}

type FloatType struct {
	*Node
}

func (n FloatType) FloatKind() FloatKind {
	return FloatKind{n.Child(selector.FloatKind)}
}

type FuncAttribute struct {
	*Node
}

type FuncBody struct {
	*Node
}

func (n FuncBody) Blocks() []BasicBlock {
	nodes := n.Children(selector.BasicBlock)
	var ret = make([]BasicBlock, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, BasicBlock{node})
	}
	return ret
}

func (n FuncBody) UseListOrders() []UseListOrder {
	nodes := n.Children(selector.UseListOrder)
	var ret = make([]UseListOrder, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UseListOrder{node})
	}
	return ret
}

type FuncDecl struct {
	*Node
}

func (n FuncDecl) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

func (n FuncDecl) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

type FuncDef struct {
	*Node
}

func (n FuncDef) Header() FuncHeader {
	return FuncHeader{n.Child(selector.FuncHeader)}
}

func (n FuncDef) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

func (n FuncDef) Body() FuncBody {
	return FuncBody{n.Child(selector.FuncBody)}
}

type FuncHeader struct {
	*Node
}

func (n FuncHeader) ExternLinkage() *ExternLinkage {
	if child := n.Child(selector.ExternLinkage); child != nil {
		return &ExternLinkage{child}
	}
	return nil
}

func (n FuncHeader) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n FuncHeader) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n FuncHeader) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n FuncHeader) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n FuncHeader) CallingConv() CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return ToLlvmNode(child).(CallingConv)
	}
	return nil
}

func (n FuncHeader) ReturnAttrs() []ReturnAttr {
	nodes := n.Children(selector.ReturnAttr)
	var ret = make([]ReturnAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttr))
	}
	return ret
}

func (n FuncHeader) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncHeader) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n FuncHeader) Params() Params {
	return Params{n.Child(selector.Params)}
}

func (n FuncHeader) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n FuncHeader) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n FuncHeader) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var ret = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttr))
	}
	return ret
}

func (n FuncHeader) Section() *Section {
	if child := n.Child(selector.Section); child != nil {
		return &Section{child}
	}
	return nil
}

func (n FuncHeader) Comdat() *Comdat {
	if child := n.Child(selector.Comdat); child != nil {
		return &Comdat{child}
	}
	return nil
}

func (n FuncHeader) GCNode() *GCNode {
	if child := n.Child(selector.GCNode); child != nil {
		return &GCNode{child}
	}
	return nil
}

func (n FuncHeader) Prefix() *Prefix {
	if child := n.Child(selector.Prefix); child != nil {
		return &Prefix{child}
	}
	return nil
}

func (n FuncHeader) Prologue() *Prologue {
	if child := n.Child(selector.Prologue); child != nil {
		return &Prologue{child}
	}
	return nil
}

func (n FuncHeader) Personality() *Personality {
	if child := n.Child(selector.Personality); child != nil {
		return &Personality{child}
	}
	return nil
}

type FuncType struct {
	*Node
}

func (n FuncType) RetType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n FuncType) Params() Params {
	return Params{n.Child(selector.Params)}
}

type GCNode struct {
	*Node
}

func (n GCNode) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type GEPIndex struct {
	*Node
}

func (n GEPIndex) InRange() *InRange {
	if child := n.Child(selector.InRange); child != nil {
		return &InRange{child}
	}
	return nil
}

func (n GEPIndex) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

type GenericDINode struct {
	*Node
}

func (n GenericDINode) Fields() []GenericDINodeField {
	nodes := n.Children(selector.GenericDINodeField)
	var ret = make([]GenericDINodeField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(GenericDINodeField))
	}
	return ret
}

type GetElementPtrExpr struct {
	*Node
}

func (n GetElementPtrExpr) InBounds() *InBounds {
	if child := n.Child(selector.InBounds); child != nil {
		return &InBounds{child}
	}
	return nil
}

func (n GetElementPtrExpr) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GetElementPtrExpr) Src() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n GetElementPtrExpr) Indices() []GEPIndex {
	nodes := n.Children(selector.GEPIndex)
	var ret = make([]GEPIndex, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, GEPIndex{node})
	}
	return ret
}

type GetElementPtrInst struct {
	*Node
}

func (n GetElementPtrInst) InBounds() *InBounds {
	if child := n.Child(selector.InBounds); child != nil {
		return &InBounds{child}
	}
	return nil
}

func (n GetElementPtrInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GetElementPtrInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n GetElementPtrInst) Indices() []TypeValue {
	nodes := n.Child(selector.TypeValue).NextAll(selector.TypeValue)
	var ret = make([]TypeValue, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeValue{node})
	}
	return ret
}

func (n GetElementPtrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type GetterField struct {
	*Node
}

func (n GetterField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type GlobalDecl struct {
	*Node
}

func (n GlobalDecl) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n GlobalDecl) ExternLinkage() ExternLinkage {
	return ExternLinkage{n.Child(selector.ExternLinkage)}
}

func (n GlobalDecl) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n GlobalDecl) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n GlobalDecl) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n GlobalDecl) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n GlobalDecl) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n GlobalDecl) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n GlobalDecl) ExternallyInitialized() *ExternallyInitialized {
	if child := n.Child(selector.ExternallyInitialized); child != nil {
		return &ExternallyInitialized{child}
	}
	return nil
}

func (n GlobalDecl) Immutable() Immutable {
	return Immutable{n.Child(selector.Immutable)}
}

func (n GlobalDecl) ContentType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GlobalDecl) GlobalAttrs() []GlobalAttr {
	nodes := n.Children(selector.GlobalAttr)
	var ret = make([]GlobalAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(GlobalAttr))
	}
	return ret
}

func (n GlobalDecl) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var ret = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttr))
	}
	return ret
}

type GlobalDef struct {
	*Node
}

func (n GlobalDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n GlobalDef) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n GlobalDef) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n GlobalDef) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n GlobalDef) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n GlobalDef) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n GlobalDef) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n GlobalDef) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n GlobalDef) ExternallyInitialized() *ExternallyInitialized {
	if child := n.Child(selector.ExternallyInitialized); child != nil {
		return &ExternallyInitialized{child}
	}
	return nil
}

func (n GlobalDef) Immutable() Immutable {
	return Immutable{n.Child(selector.Immutable)}
}

func (n GlobalDef) ContentType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n GlobalDef) Init() Constant {
	return ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
}

func (n GlobalDef) GlobalAttrs() []GlobalAttr {
	nodes := n.Children(selector.GlobalAttr)
	var ret = make([]GlobalAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(GlobalAttr))
	}
	return ret
}

func (n GlobalDef) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var ret = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttr))
	}
	return ret
}

type GlobalIdent struct {
	*Node
}

type GlobalsField struct {
	*Node
}

func (n GlobalsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type HeaderField struct {
	*Node
}

func (n HeaderField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ICmpExpr struct {
	*Node
}

func (n ICmpExpr) Pred() IPred {
	return IPred{n.Child(selector.IPred)}
}

func (n ICmpExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ICmpExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ICmpInst struct {
	*Node
}

func (n ICmpInst) Pred() IPred {
	return IPred{n.Child(selector.IPred)}
}

func (n ICmpInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ICmpInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n ICmpInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IFuncDef struct {
	*Node
}

func (n IFuncDef) Name() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n IFuncDef) ExternLinkage() *ExternLinkage {
	if child := n.Child(selector.ExternLinkage); child != nil {
		return &ExternLinkage{child}
	}
	return nil
}

func (n IFuncDef) Linkage() *Linkage {
	if child := n.Child(selector.Linkage); child != nil {
		return &Linkage{child}
	}
	return nil
}

func (n IFuncDef) Preemption() *Preemption {
	if child := n.Child(selector.Preemption); child != nil {
		return &Preemption{child}
	}
	return nil
}

func (n IFuncDef) Visibility() *Visibility {
	if child := n.Child(selector.Visibility); child != nil {
		return &Visibility{child}
	}
	return nil
}

func (n IFuncDef) DLLStorageClass() *DLLStorageClass {
	if child := n.Child(selector.DLLStorageClass); child != nil {
		return &DLLStorageClass{child}
	}
	return nil
}

func (n IFuncDef) ThreadLocal() *ThreadLocal {
	if child := n.Child(selector.ThreadLocal); child != nil {
		return &ThreadLocal{child}
	}
	return nil
}

func (n IFuncDef) UnnamedAddr() *UnnamedAddr {
	if child := n.Child(selector.UnnamedAddr); child != nil {
		return &UnnamedAddr{child}
	}
	return nil
}

func (n IFuncDef) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n IFuncDef) ResolverType() Type {
	return ToLlvmNode(n.Child(selector.Type).Next(selector.Type)).(Type)
}

func (n IFuncDef) Resolver() Constant {
	return ToLlvmNode(n.Child(selector.GlobalIdent).Next(selector.Constant)).(Constant)
}

type IPred struct {
	*Node
}

type IdentifierField struct {
	*Node
}

func (n IdentifierField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Immutable struct {
	*Node
}

type ImportsField struct {
	*Node
}

func (n ImportsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type InAlloca struct {
	*Node
}

type InBounds struct {
	*Node
}

type InRange struct {
	*Node
}

type Inc struct {
	*Node
}

func (n Inc) X() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n Inc) Pred() LocalIdent {
	return LocalIdent{n.Child(selector.Value).Next(selector.LocalIdent)}
}

type IncludePathField struct {
	*Node
}

func (n IncludePathField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type IndirectBrTerm struct {
	*Node
}

func (n IndirectBrTerm) Addr() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n IndirectBrTerm) ValidTargets() []Label {
	nodes := n.Children(selector.Label)
	var ret = make([]Label, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Label{node})
	}
	return ret
}

func (n IndirectBrTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type InlineAsm struct {
	*Node
}

func (n InlineAsm) SideEffect() *SideEffect {
	if child := n.Child(selector.SideEffect); child != nil {
		return &SideEffect{child}
	}
	return nil
}

func (n InlineAsm) AlignStack() *AlignStack {
	if child := n.Child(selector.AlignStack); child != nil {
		return &AlignStack{child}
	}
	return nil
}

func (n InlineAsm) IntelDialect() *IntelDialect {
	if child := n.Child(selector.IntelDialect); child != nil {
		return &IntelDialect{child}
	}
	return nil
}

func (n InlineAsm) Asm() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n InlineAsm) Constraints() StringLit {
	return StringLit{n.Child(selector.StringLit).Next(selector.StringLit)}
}

type InlinedAtField struct {
	*Node
}

func (n InlinedAtField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type InsertElementExpr struct {
	*Node
}

func (n InsertElementExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n InsertElementExpr) Elem() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n InsertElementExpr) Index() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type InsertElementInst struct {
	*Node
}

func (n InsertElementInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n InsertElementInst) Elem() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertElementInst) Index() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertElementInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type InsertValueExpr struct {
	*Node
}

func (n InsertValueExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n InsertValueExpr) Elem() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n InsertValueExpr) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type InsertValueInst struct {
	*Node
}

func (n InsertValueInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n InsertValueInst) Elem() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n InsertValueInst) Indices() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

func (n InsertValueInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IntConst struct {
	*Node
}

func (n IntConst) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type IntLit struct {
	*Node
}

type IntToPtrExpr struct {
	*Node
}

func (n IntToPtrExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n IntToPtrExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type IntToPtrInst struct {
	*Node
}

func (n IntToPtrInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n IntToPtrInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n IntToPtrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IntType struct {
	*Node
}

type IntelDialect struct {
	*Node
}

type InvokeTerm struct {
	*Node
}

func (n InvokeTerm) CallingConv() CallingConv {
	if child := n.Child(selector.CallingConv); child != nil {
		return ToLlvmNode(child).(CallingConv)
	}
	return nil
}

func (n InvokeTerm) ReturnAttrs() []ReturnAttr {
	nodes := n.Children(selector.ReturnAttr)
	var ret = make([]ReturnAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ReturnAttr))
	}
	return ret
}

func (n InvokeTerm) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

func (n InvokeTerm) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n InvokeTerm) Invokee() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n InvokeTerm) Args() Args {
	return Args{n.Child(selector.Args)}
}

func (n InvokeTerm) FuncAttrs() []FuncAttr {
	nodes := n.Children(selector.FuncAttr)
	var ret = make([]FuncAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(FuncAttr))
	}
	return ret
}

func (n InvokeTerm) OperandBundles() []OperandBundle {
	nodes := n.Children(selector.OperandBundle)
	var ret = make([]OperandBundle, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OperandBundle{node})
	}
	return ret
}

func (n InvokeTerm) Normal() Label {
	return Label{n.Child(selector.Label)}
}

func (n InvokeTerm) Exception() Label {
	return Label{n.Child(selector.Label).Next(selector.Label)}
}

func (n InvokeTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type IsDefinitionField struct {
	*Node
}

func (n IsDefinitionField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsImplicitCodeField struct {
	*Node
}

func (n IsImplicitCodeField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsLocalField struct {
	*Node
}

func (n IsLocalField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsOptimizedField struct {
	*Node
}

func (n IsOptimizedField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsUnsignedField struct {
	*Node
}

func (n IsUnsignedField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type IsysrootField struct {
	*Node
}

func (n IsysrootField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type LShrExpr struct {
	*Node
}

func (n LShrExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n LShrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n LShrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type LShrInst struct {
	*Node
}

func (n LShrInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n LShrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n LShrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n LShrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type Label struct {
	*Node
}

func (n Label) Typ() LabelType {
	return LabelType{n.Child(selector.LabelType)}
}

func (n Label) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type LabelIdent struct {
	*Node
}

type LabelType struct {
	*Node
}

type LandingPadInst struct {
	*Node
}

func (n LandingPadInst) ResultType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n LandingPadInst) Cleanup() *Cleanup {
	if child := n.Child(selector.Cleanup); child != nil {
		return &Cleanup{child}
	}
	return nil
}

func (n LandingPadInst) Clauses() []Clause {
	nodes := n.Children(selector.Clause)
	var ret = make([]Clause, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Clause{node})
	}
	return ret
}

func (n LandingPadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type LanguageField struct {
	*Node
}

func (n LanguageField) DwarfLang() DwarfLang {
	return DwarfLang{n.Child(selector.DwarfLang)}
}

type LineField struct {
	*Node
}

func (n LineField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Linkage struct {
	*Node
}

type LinkageNameField struct {
	*Node
}

func (n LinkageNameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type LoadInst struct {
	*Node
}

func (n LoadInst) Atomic() *Atomic {
	if child := n.Child(selector.Atomic); child != nil {
		return &Atomic{child}
	}
	return nil
}

func (n LoadInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n LoadInst) ElemType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n LoadInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n LoadInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n LoadInst) Ordering() *AtomicOrdering {
	if child := n.Child(selector.AtomicOrdering); child != nil {
		return &AtomicOrdering{child}
	}
	return nil
}

func (n LoadInst) Alignment() *Alignment {
	if child := n.Child(selector.Alignment); child != nil {
		return &Alignment{child}
	}
	return nil
}

func (n LoadInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type LocalDefInst struct {
	*Node
}

func (n LocalDefInst) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefInst) Inst() ValueInstruction {
	return ToLlvmNode(n.Child(selector.ValueInstruction)).(ValueInstruction)
}

type LocalDefTerm struct {
	*Node
}

func (n LocalDefTerm) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n LocalDefTerm) Term() ValueTerminator {
	return ToLlvmNode(n.Child(selector.ValueTerminator)).(ValueTerminator)
}

type LocalIdent struct {
	*Node
}

type LowerBoundField struct {
	*Node
}

func (n LowerBoundField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type MDFields struct {
	*Node
}

func (n MDFields) MDFields() []MDField {
	nodes := n.Children(selector.MDField)
	var ret = make([]MDField, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(MDField))
	}
	return ret
}

type MDString struct {
	*Node
}

func (n MDString) Val() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type MDTuple struct {
	*Node
}

func (n MDTuple) MDFields() MDFields {
	return MDFields{n.Child(selector.MDFields)}
}

type MMXType struct {
	*Node
}

type MacrosField struct {
	*Node
}

func (n MacrosField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type MetadataAttachment struct {
	*Node
}

func (n MetadataAttachment) Name() MetadataName {
	return MetadataName{n.Child(selector.MetadataName)}
}

func (n MetadataAttachment) MDNode() MDNode {
	return ToLlvmNode(n.Child(selector.MDNode)).(MDNode)
}

type MetadataDef struct {
	*Node
}

func (n MetadataDef) Name() MetadataID {
	return MetadataID{n.Child(selector.MetadataID)}
}

func (n MetadataDef) Distinct() *Distinct {
	if child := n.Child(selector.Distinct); child != nil {
		return &Distinct{child}
	}
	return nil
}

func (n MetadataDef) MDNode() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.DIBasicType, ll.DICompileUnit, ll.DICompositeType, ll.DIDerivedType, ll.DIEnumerator, ll.DIExpression, ll.DIFile, ll.DIGlobalVariable, ll.DIGlobalVariableExpression, ll.DIImportedEntity, ll.DILabel, ll.DILexicalBlock, ll.DILexicalBlockFile, ll.DILocalVariable, ll.DILocation, ll.DIMacro, ll.DIMacroFile, ll.DIModule, ll.DINamespace, ll.DIObjCProperty, ll.DISubprogram, ll.DISubrange, ll.DISubroutineType, ll.DITemplateTypeParameter, ll.DITemplateValueParameter, ll.GenericDINode, ll.MDTuple))).(LlvmNode)
}

type MetadataID struct {
	*Node
}

type MetadataName struct {
	*Node
}

type MetadataType struct {
	*Node
}

type Module struct {
	*Node
}

func (n Module) TopLevelEntities() []TopLevelEntity {
	nodes := n.Children(selector.TopLevelEntity)
	var ret = make([]TopLevelEntity, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(TopLevelEntity))
	}
	return ret
}

type ModuleAsm struct {
	*Node
}

func (n ModuleAsm) Asm() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type MulExpr struct {
	*Node
}

func (n MulExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n MulExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n MulExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type MulInst struct {
	*Node
}

func (n MulInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n MulInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n MulInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n MulInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type NameField struct {
	*Node
}

func (n NameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type NameTableKind struct {
	*Node
}

func (n NameTableKind) UintLit() *UintLit {
	if child := n.Child(selector.UintLit); child != nil {
		return &UintLit{child}
	}
	return nil
}

type NameTableKindField struct {
	*Node
}

func (n NameTableKindField) NameTableKind() NameTableKind {
	return NameTableKind{n.Child(selector.NameTableKind)}
}

type NamedMetadataDef struct {
	*Node
}

func (n NamedMetadataDef) Name() MetadataName {
	return MetadataName{n.Child(selector.MetadataName)}
}

func (n NamedMetadataDef) MDNodes() []MetadataNode {
	nodes := n.Children(selector.MetadataNode)
	var ret = make([]MetadataNode, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(MetadataNode))
	}
	return ret
}

type NamedType struct {
	*Node
}

func (n NamedType) Name() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

type NodesField struct {
	*Node
}

func (n NodesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type NoneConst struct {
	*Node
}

type NullConst struct {
	*Node
}

func (n NullConst) NullLit() NullLit {
	return NullLit{n.Child(selector.NullLit)}
}

type NullLit struct {
	*Node
}

type OffsetField struct {
	*Node
}

func (n OffsetField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type OpaqueType struct {
	*Node
}

type OperandBundle struct {
	*Node
}

func (n OperandBundle) Tag() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

func (n OperandBundle) Inputs() []TypeValue {
	nodes := n.Children(selector.TypeValue)
	var ret = make([]TypeValue, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeValue{node})
	}
	return ret
}

type OperandsField struct {
	*Node
}

func (n OperandsField) MDFields() MDFields {
	return MDFields{n.Child(selector.MDFields)}
}

type OrExpr struct {
	*Node
}

func (n OrExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n OrExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type OrInst struct {
	*Node
}

func (n OrInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n OrInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n OrInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type OverflowFlag struct {
	*Node
}

type PackedStructType struct {
	*Node
}

func (n PackedStructType) Fields() []Type {
	nodes := n.Children(selector.Type)
	var ret = make([]Type, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(Type))
	}
	return ret
}

type Param struct {
	*Node
}

func (n Param) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Param) Attrs() []ParamAttr {
	nodes := n.Children(selector.ParamAttr)
	var ret = make([]ParamAttr, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(ParamAttr))
	}
	return ret
}

func (n Param) Name() *LocalIdent {
	if child := n.Child(selector.LocalIdent); child != nil {
		return &LocalIdent{child}
	}
	return nil
}

type ParamAttribute struct {
	*Node
}

type Params struct {
	*Node
}

func (n Params) Params() []Param {
	nodes := n.Children(selector.Param)
	var ret = make([]Param, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Param{node})
	}
	return ret
}

func (n Params) Variadic() *Ellipsis {
	if child := n.Child(selector.Ellipsis); child != nil {
		return &Ellipsis{child}
	}
	return nil
}

type Personality struct {
	*Node
}

func (n Personality) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Personality) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type PhiInst struct {
	*Node
}

func (n PhiInst) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PhiInst) Incs() []Inc {
	nodes := n.Children(selector.Inc)
	var ret = make([]Inc, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Inc{node})
	}
	return ret
}

func (n PhiInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type PointerType struct {
	*Node
}

func (n PointerType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PointerType) AddrSpace() *AddrSpace {
	if child := n.Child(selector.AddrSpace); child != nil {
		return &AddrSpace{child}
	}
	return nil
}

type Preemption struct {
	*Node
}

type Prefix struct {
	*Node
}

func (n Prefix) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Prefix) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type ProducerField struct {
	*Node
}

func (n ProducerField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type Prologue struct {
	*Node
}

func (n Prologue) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n Prologue) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type PtrToIntExpr struct {
	*Node
}

func (n PtrToIntExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n PtrToIntExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type PtrToIntInst struct {
	*Node
}

func (n PtrToIntInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n PtrToIntInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n PtrToIntInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ResumeTerm struct {
	*Node
}

func (n ResumeTerm) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ResumeTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type RetTerm struct {
	*Node
}

func (n RetTerm) XTyp() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.IntType, ll.LabelType, ll.MMXType, ll.NamedType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType, ll.VoidType))).(LlvmNode)
}

func (n RetTerm) X() Value {
	if child := n.Child(selector.Value); child != nil {
		return ToLlvmNode(child).(Value)
	}
	return nil
}

func (n RetTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type RetainedNodesField struct {
	*Node
}

func (n RetainedNodesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type RetainedTypesField struct {
	*Node
}

func (n RetainedTypesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ReturnAttribute struct {
	*Node
}

type RuntimeLangField struct {
	*Node
}

func (n RuntimeLangField) DwarfLang() DwarfLang {
	return DwarfLang{n.Child(selector.DwarfLang)}
}

type RuntimeVersionField struct {
	*Node
}

func (n RuntimeVersionField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type SDivExpr struct {
	*Node
}

func (n SDivExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n SDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SDivInst struct {
	*Node
}

func (n SDivInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n SDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SDivInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SExtExpr struct {
	*Node
}

func (n SExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type SExtInst struct {
	*Node
}

func (n SExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n SExtInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SIToFPExpr struct {
	*Node
}

func (n SIToFPExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SIToFPExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type SIToFPInst struct {
	*Node
}

func (n SIToFPInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SIToFPInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n SIToFPInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SRemExpr struct {
	*Node
}

func (n SRemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SRemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SRemInst struct {
	*Node
}

func (n SRemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SRemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SRemInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ScopeField struct {
	*Node
}

func (n ScopeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ScopeLineField struct {
	*Node
}

func (n ScopeLineField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type Section struct {
	*Node
}

func (n Section) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SelectExpr struct {
	*Node
}

func (n SelectExpr) Cond() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SelectExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n SelectExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type SelectInst struct {
	*Node
}

func (n SelectInst) Cond() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SelectInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n SelectInst) Y() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n SelectInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SelectionKind struct {
	*Node
}

type SetterField struct {
	*Node
}

func (n SetterField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type ShlExpr struct {
	*Node
}

func (n ShlExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n ShlExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ShlExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type ShlInst struct {
	*Node
}

func (n ShlInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n ShlInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ShlInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n ShlInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ShuffleVectorExpr struct {
	*Node
}

func (n ShuffleVectorExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ShuffleVectorExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

func (n ShuffleVectorExpr) Mask() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst).Next(selector.TypeConst)}
}

type ShuffleVectorInst struct {
	*Node
}

func (n ShuffleVectorInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ShuffleVectorInst) Y() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ShuffleVectorInst) Mask() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue).Next(selector.TypeValue)}
}

func (n ShuffleVectorInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SideEffect struct {
	*Node
}

type SizeField struct {
	*Node
}

func (n SizeField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type SourceField struct {
	*Node
}

func (n SourceField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SourceFilename struct {
	*Node
}

func (n SourceFilename) Name() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SplitDebugFilenameField struct {
	*Node
}

func (n SplitDebugFilenameField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type SplitDebugInliningField struct {
	*Node
}

func (n SplitDebugInliningField) BoolLit() BoolLit {
	return BoolLit{n.Child(selector.BoolLit)}
}

type StackAlignment struct {
	*Node
}

func (n StackAlignment) N() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

type StoreInst struct {
	*Node
}

func (n StoreInst) Atomic() *Atomic {
	if child := n.Child(selector.Atomic); child != nil {
		return &Atomic{child}
	}
	return nil
}

func (n StoreInst) Volatile() *Volatile {
	if child := n.Child(selector.Volatile); child != nil {
		return &Volatile{child}
	}
	return nil
}

func (n StoreInst) Src() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n StoreInst) Dst() TypeValue {
	return TypeValue{n.Child(selector.TypeValue).Next(selector.TypeValue)}
}

func (n StoreInst) SyncScope() *SyncScope {
	if child := n.Child(selector.SyncScope); child != nil {
		return &SyncScope{child}
	}
	return nil
}

func (n StoreInst) Ordering() *AtomicOrdering {
	if child := n.Child(selector.AtomicOrdering); child != nil {
		return &AtomicOrdering{child}
	}
	return nil
}

func (n StoreInst) Alignment() *Alignment {
	if child := n.Child(selector.Alignment); child != nil {
		return &Alignment{child}
	}
	return nil
}

func (n StoreInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type StringLit struct {
	*Node
}

type StructConst struct {
	*Node
}

func (n StructConst) Fields() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var ret = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeConst{node})
	}
	return ret
}

type StructType struct {
	*Node
}

func (n StructType) Fields() []Type {
	nodes := n.Children(selector.Type)
	var ret = make([]Type, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, ToLlvmNode(node).(Type))
	}
	return ret
}

type SubExpr struct {
	*Node
}

func (n SubExpr) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n SubExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n SubExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type SubInst struct {
	*Node
}

func (n SubInst) OverflowFlags() []OverflowFlag {
	nodes := n.Children(selector.OverflowFlag)
	var ret = make([]OverflowFlag, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, OverflowFlag{node})
	}
	return ret
}

func (n SubInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SubInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n SubInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SwiftError struct {
	*Node
}

type SwitchTerm struct {
	*Node
}

func (n SwitchTerm) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n SwitchTerm) Default() Label {
	return Label{n.Child(selector.Label)}
}

func (n SwitchTerm) Cases() []Case {
	nodes := n.Children(selector.Case)
	var ret = make([]Case, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, Case{node})
	}
	return ret
}

func (n SwitchTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type SyncScope struct {
	*Node
}

func (n SyncScope) Scope() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TLSModel struct {
	*Node
}

type TagField struct {
	*Node
}

func (n TagField) DwarfTag() DwarfTag {
	return DwarfTag{n.Child(selector.DwarfTag)}
}

type Tail struct {
	*Node
}

type TargetDataLayout struct {
	*Node
}

func (n TargetDataLayout) DataLayout() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TargetTriple struct {
	*Node
}

func (n TargetTriple) TargetTriple() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type TemplateParamsField struct {
	*Node
}

func (n TemplateParamsField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ThisAdjustmentField struct {
	*Node
}

func (n ThisAdjustmentField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ThreadLocal struct {
	*Node
}

func (n ThreadLocal) Model() *TLSModel {
	if child := n.Child(selector.TLSModel); child != nil {
		return &TLSModel{child}
	}
	return nil
}

type ThrownTypesField struct {
	*Node
}

func (n ThrownTypesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type TokenType struct {
	*Node
}

type TruncExpr struct {
	*Node
}

func (n TruncExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n TruncExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type TruncInst struct {
	*Node
}

func (n TruncInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n TruncInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n TruncInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type TypeConst struct {
	*Node
}

func (n TypeConst) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeConst) Val() Constant {
	return ToLlvmNode(n.Child(selector.Constant)).(Constant)
}

type TypeDef struct {
	*Node
}

func (n TypeDef) Alias() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n TypeDef) Typ() LlvmNode {
	return ToLlvmNode(n.Child(selector.OneOf(ll.ArrayType, ll.FloatType, ll.FuncType, ll.IntType, ll.LabelType, ll.MMXType, ll.MetadataType, ll.NamedType, ll.OpaqueType, ll.PackedStructType, ll.PointerType, ll.StructType, ll.TokenType, ll.VectorType, ll.VoidType))).(LlvmNode)
}

type TypeField struct {
	*Node
}

func (n TypeField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type TypeMacinfoField struct {
	*Node
}

func (n TypeMacinfoField) DwarfMacinfo() DwarfMacinfo {
	return DwarfMacinfo{n.Child(selector.DwarfMacinfo)}
}

type TypeValue struct {
	*Node
}

func (n TypeValue) Typ() FirstClassType {
	return ToLlvmNode(n.Child(selector.FirstClassType)).(FirstClassType)
}

func (n TypeValue) Val() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

type TypesField struct {
	*Node
}

func (n TypesField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type UDivExpr struct {
	*Node
}

func (n UDivExpr) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n UDivExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n UDivExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type UDivInst struct {
	*Node
}

func (n UDivInst) Exact() *Exact {
	if child := n.Child(selector.Exact); child != nil {
		return &Exact{child}
	}
	return nil
}

func (n UDivInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UDivInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n UDivInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type UIToFPExpr struct {
	*Node
}

func (n UIToFPExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n UIToFPExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type UIToFPInst struct {
	*Node
}

func (n UIToFPInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n UIToFPInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n UIToFPInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type URemExpr struct {
	*Node
}

func (n URemExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n URemExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type URemInst struct {
	*Node
}

func (n URemInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n URemInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n URemInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type UintLit struct {
	*Node
}

type UndefConst struct {
	*Node
}

type UnitField struct {
	*Node
}

func (n UnitField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type UnnamedAddr struct {
	*Node
}

type UnreachableTerm struct {
	*Node
}

func (n UnreachableTerm) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type UnwindTarget struct {
	*Node
}

func (n UnwindTarget) Label() *Label {
	if child := n.Child(selector.Label); child != nil {
		return &Label{child}
	}
	return nil
}

type UseListOrder struct {
	*Node
}

func (n UseListOrder) Typ() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n UseListOrder) Val() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n UseListOrder) Indicies() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type UseListOrderBB struct {
	*Node
}

func (n UseListOrderBB) Func() GlobalIdent {
	return GlobalIdent{n.Child(selector.GlobalIdent)}
}

func (n UseListOrderBB) Block() LocalIdent {
	return LocalIdent{n.Child(selector.LocalIdent)}
}

func (n UseListOrderBB) Indicies() []UintLit {
	nodes := n.Children(selector.UintLit)
	var ret = make([]UintLit, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, UintLit{node})
	}
	return ret
}

type VAArgInst struct {
	*Node
}

func (n VAArgInst) ArgList() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n VAArgInst) ArgType() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n VAArgInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ValueField struct {
	*Node
}

func (n ValueField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type ValueIntField struct {
	*Node
}

func (n ValueIntField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type ValueStringField struct {
	*Node
}

func (n ValueStringField) StringLit() StringLit {
	return StringLit{n.Child(selector.StringLit)}
}

type VarField struct {
	*Node
}

func (n VarField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type VectorConst struct {
	*Node
}

func (n VectorConst) Elems() []TypeConst {
	nodes := n.Children(selector.TypeConst)
	var ret = make([]TypeConst, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, TypeConst{node})
	}
	return ret
}

type VectorType struct {
	*Node
}

func (n VectorType) Len() UintLit {
	return UintLit{n.Child(selector.UintLit)}
}

func (n VectorType) Elem() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type VirtualIndexField struct {
	*Node
}

func (n VirtualIndexField) IntLit() IntLit {
	return IntLit{n.Child(selector.IntLit)}
}

type VirtualityField struct {
	*Node
}

func (n VirtualityField) DwarfVirtuality() DwarfVirtuality {
	return DwarfVirtuality{n.Child(selector.DwarfVirtuality)}
}

type Visibility struct {
	*Node
}

type VoidType struct {
	*Node
}

type Volatile struct {
	*Node
}

type VtableHolderField struct {
	*Node
}

func (n VtableHolderField) MDField() MDField {
	return ToLlvmNode(n.Child(selector.MDField)).(MDField)
}

type Weak struct {
	*Node
}

type XorExpr struct {
	*Node
}

func (n XorExpr) X() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n XorExpr) Y() TypeConst {
	return TypeConst{n.Child(selector.TypeConst).Next(selector.TypeConst)}
}

type XorInst struct {
	*Node
}

func (n XorInst) X() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n XorInst) Y() Value {
	return ToLlvmNode(n.Child(selector.Value)).(Value)
}

func (n XorInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ZExtExpr struct {
	*Node
}

func (n ZExtExpr) From() TypeConst {
	return TypeConst{n.Child(selector.TypeConst)}
}

func (n ZExtExpr) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

type ZExtInst struct {
	*Node
}

func (n ZExtInst) From() TypeValue {
	return TypeValue{n.Child(selector.TypeValue)}
}

func (n ZExtInst) To() Type {
	return ToLlvmNode(n.Child(selector.Type)).(Type)
}

func (n ZExtInst) Metadata() []MetadataAttachment {
	nodes := n.Children(selector.MetadataAttachment)
	var ret = make([]MetadataAttachment, 0, len(nodes))
	for _, node := range nodes {
		ret = append(ret, MetadataAttachment{node})
	}
	return ret
}

type ZeroInitializerConst struct {
	*Node
}


